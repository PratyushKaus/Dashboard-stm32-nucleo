
DASHBOARD STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  08006350  08006350  00016350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d90  08006d90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d98  08006d98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bdc  20000074  08006e14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c50  08006e14  00025c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000777c  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001760  00000000  00000000  00027863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00028fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b33  00000000  00000000  000296e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d04  00000000  00000000  0003f21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852ad  00000000  00000000  00047f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000053f  00000000  00000000  000cd1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024fc  00000000  00000000  000cd70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000cfc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006338 	.word	0x08006338

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006338 	.word	0x08006338

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f002 fbeb 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 ff8d 	bl	8001c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f001 f82b 	bl	8001db0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d5a:	f000 fff3 	bl	8001d44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000d5e:	f001 f97f 	bl	8002060 <ST7789_Init>
//	unsigned int x,y;
//	char buf[20];

//	ST7789_Test();

  int a=120;
 8000d62:	2378      	movs	r3, #120	; 0x78
 8000d64:	617b      	str	r3, [r7, #20]
  for(int i=0;i<360;i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	f000 bc32 	b.w	80015d2 <main+0x88a>
    {
       x[i]=((r-10)*cos(rad*a))+cx;
 8000d6e:	4bda      	ldr	r3, [pc, #872]	; (80010d8 <main+0x390>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3b0a      	subs	r3, #10
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcff 	bl	8000778 <__aeabi_i2d>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	460d      	mov	r5, r1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d88:	4bd4      	ldr	r3, [pc, #848]	; (80010dc <main+0x394>)
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	ee17 0a90 	vmov	r0, s15
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_f2d>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	ec43 2b10 	vmov	d0, r2, r3
 8000da2:	f004 fa35 	bl	8005210 <cos>
 8000da6:	ec53 2b10 	vmov	r2, r3, d0
 8000daa:	4620      	mov	r0, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	f7ff fa67 	bl	8000280 <__aeabi_dmul>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4614      	mov	r4, r2
 8000db8:	461d      	mov	r5, r3
 8000dba:	4bc9      	ldr	r3, [pc, #804]	; (80010e0 <main+0x398>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcda 	bl	8000778 <__aeabi_i2d>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	f7ff fb88 	bl	80004e0 <__adddf3>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fde8 	bl	80009ac <__aeabi_d2f>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	49c1      	ldr	r1, [pc, #772]	; (80010e4 <main+0x39c>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	601a      	str	r2, [r3, #0]
       y[i]=((r-10)*sin(rad*a))+cy;
 8000de8:	4bbb      	ldr	r3, [pc, #748]	; (80010d8 <main+0x390>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b0a      	subs	r3, #10
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcc2 	bl	8000778 <__aeabi_i2d>
 8000df4:	4604      	mov	r4, r0
 8000df6:	460d      	mov	r5, r1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e02:	4bb6      	ldr	r3, [pc, #728]	; (80010dc <main+0x394>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	f7ff fcc4 	bl	800079c <__aeabi_f2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	ec43 2b10 	vmov	d0, r2, r3
 8000e1c:	f004 fa4c 	bl	80052b8 <sin>
 8000e20:	ec53 2b10 	vmov	r2, r3, d0
 8000e24:	4620      	mov	r0, r4
 8000e26:	4629      	mov	r1, r5
 8000e28:	f7ff fa2a 	bl	8000280 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4614      	mov	r4, r2
 8000e32:	461d      	mov	r5, r3
 8000e34:	4bac      	ldr	r3, [pc, #688]	; (80010e8 <main+0x3a0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fc9d 	bl	8000778 <__aeabi_i2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4620      	mov	r0, r4
 8000e44:	4629      	mov	r1, r5
 8000e46:	f7ff fb4b 	bl	80004e0 <__adddf3>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fdab 	bl	80009ac <__aeabi_d2f>
 8000e56:	4602      	mov	r2, r0
 8000e58:	49a4      	ldr	r1, [pc, #656]	; (80010ec <main+0x3a4>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	601a      	str	r2, [r3, #0]
       px[i]=((r-14)*cos(rad*a))+cx;
 8000e62:	4b9d      	ldr	r3, [pc, #628]	; (80010d8 <main+0x390>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3b0e      	subs	r3, #14
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc85 	bl	8000778 <__aeabi_i2d>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	460d      	mov	r5, r1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7c:	4b97      	ldr	r3, [pc, #604]	; (80010dc <main+0x394>)
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ee17 0a90 	vmov	r0, s15
 8000e8a:	f7ff fc87 	bl	800079c <__aeabi_f2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	ec43 2b10 	vmov	d0, r2, r3
 8000e96:	f004 f9bb 	bl	8005210 <cos>
 8000e9a:	ec53 2b10 	vmov	r2, r3, d0
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	f7ff f9ed 	bl	8000280 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4614      	mov	r4, r2
 8000eac:	461d      	mov	r5, r3
 8000eae:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <main+0x398>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc60 	bl	8000778 <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff fb0e 	bl	80004e0 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fd6e 	bl	80009ac <__aeabi_d2f>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4987      	ldr	r1, [pc, #540]	; (80010f0 <main+0x3a8>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	601a      	str	r2, [r3, #0]
       py[i]=((r-14)*sin(rad*a))+cy;
 8000edc:	4b7e      	ldr	r3, [pc, #504]	; (80010d8 <main+0x390>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3b0e      	subs	r3, #14
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc48 	bl	8000778 <__aeabi_i2d>
 8000ee8:	4604      	mov	r4, r0
 8000eea:	460d      	mov	r5, r1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef6:	4b79      	ldr	r3, [pc, #484]	; (80010dc <main+0x394>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	ee17 0a90 	vmov	r0, s15
 8000f04:	f7ff fc4a 	bl	800079c <__aeabi_f2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	ec43 2b10 	vmov	d0, r2, r3
 8000f10:	f004 f9d2 	bl	80052b8 <sin>
 8000f14:	ec53 2b10 	vmov	r2, r3, d0
 8000f18:	4620      	mov	r0, r4
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f7ff f9b0 	bl	8000280 <__aeabi_dmul>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4614      	mov	r4, r2
 8000f26:	461d      	mov	r5, r3
 8000f28:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <main+0x3a0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fc23 	bl	8000778 <__aeabi_i2d>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4620      	mov	r0, r4
 8000f38:	4629      	mov	r1, r5
 8000f3a:	f7ff fad1 	bl	80004e0 <__adddf3>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fd31 	bl	80009ac <__aeabi_d2f>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4969      	ldr	r1, [pc, #420]	; (80010f4 <main+0x3ac>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	601a      	str	r2, [r3, #0]
       lx[i]=((r-24)*cos(rad*a))+cx;
 8000f56:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <main+0x390>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3b18      	subs	r3, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fc0b 	bl	8000778 <__aeabi_i2d>
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <main+0x394>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	ee17 0a90 	vmov	r0, s15
 8000f7e:	f7ff fc0d 	bl	800079c <__aeabi_f2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	ec43 2b10 	vmov	d0, r2, r3
 8000f8a:	f004 f941 	bl	8005210 <cos>
 8000f8e:	ec53 2b10 	vmov	r2, r3, d0
 8000f92:	4620      	mov	r0, r4
 8000f94:	4629      	mov	r1, r5
 8000f96:	f7ff f973 	bl	8000280 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <main+0x398>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fbe6 	bl	8000778 <__aeabi_i2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f7ff fa94 	bl	80004e0 <__adddf3>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fcf4 	bl	80009ac <__aeabi_d2f>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	494c      	ldr	r1, [pc, #304]	; (80010f8 <main+0x3b0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	601a      	str	r2, [r3, #0]
       ly[i]=((r-24)*sin(rad*a))+cy;
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <main+0x390>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3b18      	subs	r3, #24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fbce 	bl	8000778 <__aeabi_i2d>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460d      	mov	r5, r1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <main+0x394>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fbd0 	bl	800079c <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	ec43 2b10 	vmov	d0, r2, r3
 8001004:	f004 f958 	bl	80052b8 <sin>
 8001008:	ec53 2b10 	vmov	r2, r3, d0
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff f936 	bl	8000280 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4614      	mov	r4, r2
 800101a:	461d      	mov	r5, r3
 800101c:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <main+0x3a0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fba9 	bl	8000778 <__aeabi_i2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff fa57 	bl	80004e0 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fcb7 	bl	80009ac <__aeabi_d2f>
 800103e:	4602      	mov	r2, r0
 8001040:	492e      	ldr	r1, [pc, #184]	; (80010fc <main+0x3b4>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	601a      	str	r2, [r3, #0]
       nx[i]=((r-36)*cos(rad*a))+cx;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <main+0x390>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3b24      	subs	r3, #36	; 0x24
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fb91 	bl	8000778 <__aeabi_i2d>
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <main+0x394>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f7ff fb93 	bl	800079c <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	ec43 2b10 	vmov	d0, r2, r3
 800107e:	f004 f8c7 	bl	8005210 <cos>
 8001082:	ec53 2b10 	vmov	r2, r3, d0
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f8f9 	bl	8000280 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4614      	mov	r4, r2
 8001094:	461d      	mov	r5, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <main+0x398>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fb6c 	bl	8000778 <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff fa1a 	bl	80004e0 <__adddf3>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fc7a 	bl	80009ac <__aeabi_d2f>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4911      	ldr	r1, [pc, #68]	; (8001100 <main+0x3b8>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
       ny[i]=((r-36)*sin(rad*a))+cy;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <main+0x390>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b24      	subs	r3, #36	; 0x24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fb54 	bl	8000778 <__aeabi_i2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	e016      	b.n	8001104 <main+0x3bc>
 80010d6:	bf00      	nop
 80010d8:	20000010 	.word	0x20000010
 80010dc:	20000014 	.word	0x20000014
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000094 	.word	0x20000094
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000634 	.word	0x20000634
 80010f0:	20000bd4 	.word	0x20000bd4
 80010f4:	20001174 	.word	0x20001174
 80010f8:	20001714 	.word	0x20001714
 80010fc:	20001cb4 	.word	0x20001cb4
 8001100:	20002254 	.word	0x20002254
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	4bdc      	ldr	r3, [pc, #880]	; (8001480 <main+0x738>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001118:	ee17 0a90 	vmov	r0, s15
 800111c:	f7ff fb3e 	bl	800079c <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f004 f8c6 	bl	80052b8 <sin>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff f8a4 	bl	8000280 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4614      	mov	r4, r2
 800113e:	461d      	mov	r5, r3
 8001140:	4bd0      	ldr	r3, [pc, #832]	; (8001484 <main+0x73c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fb17 	bl	8000778 <__aeabi_i2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f9c5 	bl	80004e0 <__adddf3>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc25 	bl	80009ac <__aeabi_d2f>
 8001162:	4602      	mov	r2, r0
 8001164:	49c8      	ldr	r1, [pc, #800]	; (8001488 <main+0x740>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	601a      	str	r2, [r3, #0]
       x2[i]=((r-10)*cos(rad*a))+320-cx;
 800116e:	4bc7      	ldr	r3, [pc, #796]	; (800148c <main+0x744>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3b0a      	subs	r3, #10
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff faff 	bl	8000778 <__aeabi_i2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	4bbd      	ldr	r3, [pc, #756]	; (8001480 <main+0x738>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff fb01 	bl	800079c <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ec43 2b10 	vmov	d0, r2, r3
 80011a2:	f004 f835 	bl	8005210 <cos>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff f867 	bl	8000280 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4bb4      	ldr	r3, [pc, #720]	; (8001490 <main+0x748>)
 80011c0:	f7ff f98e 	bl	80004e0 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4614      	mov	r4, r2
 80011ca:	461d      	mov	r5, r3
 80011cc:	4bb1      	ldr	r3, [pc, #708]	; (8001494 <main+0x74c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fad1 	bl	8000778 <__aeabi_i2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff f97d 	bl	80004dc <__aeabi_dsub>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fbdf 	bl	80009ac <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	49a9      	ldr	r1, [pc, #676]	; (8001498 <main+0x750>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	601a      	str	r2, [r3, #0]
       y2[i]=((r-10)*sin(rad*a))+cy;
 80011fa:	4ba4      	ldr	r3, [pc, #656]	; (800148c <main+0x744>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3b0a      	subs	r3, #10
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fab9 	bl	8000778 <__aeabi_i2d>
 8001206:	4604      	mov	r4, r0
 8001208:	460d      	mov	r5, r1
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	4b9a      	ldr	r3, [pc, #616]	; (8001480 <main+0x738>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff fabb 	bl	800079c <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	ec43 2b10 	vmov	d0, r2, r3
 800122e:	f004 f843 	bl	80052b8 <sin>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f821 	bl	8000280 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <main+0x73c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fa94 	bl	8000778 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f942 	bl	80004e0 <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fba2 	bl	80009ac <__aeabi_d2f>
 8001268:	4602      	mov	r2, r0
 800126a:	498c      	ldr	r1, [pc, #560]	; (800149c <main+0x754>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	601a      	str	r2, [r3, #0]
       px2[i]=((r-14)*cos(rad*a))+320-cx;
 8001274:	4b85      	ldr	r3, [pc, #532]	; (800148c <main+0x744>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b0e      	subs	r3, #14
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fa7c 	bl	8000778 <__aeabi_i2d>
 8001280:	4604      	mov	r4, r0
 8001282:	460d      	mov	r5, r1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <main+0x738>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	ee17 0a90 	vmov	r0, s15
 800129c:	f7ff fa7e 	bl	800079c <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b10 	vmov	d0, r2, r3
 80012a8:	f003 ffb2 	bl	8005210 <cos>
 80012ac:	ec53 2b10 	vmov	r2, r3, d0
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7fe ffe4 	bl	8000280 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b72      	ldr	r3, [pc, #456]	; (8001490 <main+0x748>)
 80012c6:	f7ff f90b 	bl	80004e0 <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <main+0x74c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fa4e 	bl	8000778 <__aeabi_i2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7ff f8fa 	bl	80004dc <__aeabi_dsub>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb5c 	bl	80009ac <__aeabi_d2f>
 80012f4:	4602      	mov	r2, r0
 80012f6:	496a      	ldr	r1, [pc, #424]	; (80014a0 <main+0x758>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	601a      	str	r2, [r3, #0]
       py2[i]=((r-14)*sin(rad*a))+cy;
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <main+0x744>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b0e      	subs	r3, #14
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa36 	bl	8000778 <__aeabi_i2d>
 800130c:	4604      	mov	r4, r0
 800130e:	460d      	mov	r5, r1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <main+0x738>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	ee17 0a90 	vmov	r0, s15
 8001328:	f7ff fa38 	bl	800079c <__aeabi_f2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	ec43 2b10 	vmov	d0, r2, r3
 8001334:	f003 ffc0 	bl	80052b8 <sin>
 8001338:	ec53 2b10 	vmov	r2, r3, d0
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7fe ff9e 	bl	8000280 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4614      	mov	r4, r2
 800134a:	461d      	mov	r5, r3
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <main+0x73c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fa11 	bl	8000778 <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff f8bf 	bl	80004e0 <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fb1f 	bl	80009ac <__aeabi_d2f>
 800136e:	4602      	mov	r2, r0
 8001370:	494c      	ldr	r1, [pc, #304]	; (80014a4 <main+0x75c>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	601a      	str	r2, [r3, #0]
       lx2[i]=((r-24)*cos(rad*a))+320-cx;
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <main+0x744>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3b18      	subs	r3, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f9f9 	bl	8000778 <__aeabi_i2d>
 8001386:	4604      	mov	r4, r0
 8001388:	460d      	mov	r5, r1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <main+0x738>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	ee17 0a90 	vmov	r0, s15
 80013a2:	f7ff f9fb 	bl	800079c <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	ec43 2b10 	vmov	d0, r2, r3
 80013ae:	f003 ff2f 	bl	8005210 <cos>
 80013b2:	ec53 2b10 	vmov	r2, r3, d0
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7fe ff61 	bl	8000280 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <main+0x748>)
 80013cc:	f7ff f888 	bl	80004e0 <__adddf3>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	461d      	mov	r5, r3
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <main+0x74c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f9cb 	bl	8000778 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff f877 	bl	80004dc <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fad9 	bl	80009ac <__aeabi_d2f>
 80013fa:	4602      	mov	r2, r0
 80013fc:	492a      	ldr	r1, [pc, #168]	; (80014a8 <main+0x760>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	601a      	str	r2, [r3, #0]
       ly2[i]=((r-24)*sin(rad*a))+cy;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0x744>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3b18      	subs	r3, #24
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f9b3 	bl	8000778 <__aeabi_i2d>
 8001412:	4604      	mov	r4, r0
 8001414:	460d      	mov	r5, r1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <main+0x738>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	ee17 0a90 	vmov	r0, s15
 800142e:	f7ff f9b5 	bl	800079c <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	ec43 2b10 	vmov	d0, r2, r3
 800143a:	f003 ff3d 	bl	80052b8 <sin>
 800143e:	ec53 2b10 	vmov	r2, r3, d0
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe ff1b 	bl	8000280 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <main+0x73c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f98e 	bl	8000778 <__aeabi_i2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7ff f83c 	bl	80004e0 <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fa9c 	bl	80009ac <__aeabi_d2f>
 8001474:	4602      	mov	r2, r0
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <main+0x764>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	e018      	b.n	80014b0 <main+0x768>
 800147e:	bf00      	nop
 8001480:	20000014 	.word	0x20000014
 8001484:	2000000c 	.word	0x2000000c
 8001488:	200027f4 	.word	0x200027f4
 800148c:	20000010 	.word	0x20000010
 8001490:	40740000 	.word	0x40740000
 8001494:	20000008 	.word	0x20000008
 8001498:	20002d94 	.word	0x20002d94
 800149c:	20003334 	.word	0x20003334
 80014a0:	200038d4 	.word	0x200038d4
 80014a4:	20003e74 	.word	0x20003e74
 80014a8:	20004414 	.word	0x20004414
 80014ac:	200049b4 	.word	0x200049b4
 80014b0:	440b      	add	r3, r1
 80014b2:	601a      	str	r2, [r3, #0]
       nx2[i]=((r-36)*cos(rad*a))+320-cx;
 80014b4:	4bc3      	ldr	r3, [pc, #780]	; (80017c4 <main+0xa7c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b24      	subs	r3, #36	; 0x24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f95c 	bl	8000778 <__aeabi_i2d>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ce:	4bbe      	ldr	r3, [pc, #760]	; (80017c8 <main+0xa80>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	ee17 0a90 	vmov	r0, s15
 80014dc:	f7ff f95e 	bl	800079c <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f003 fe92 	bl	8005210 <cos>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fec4 	bl	8000280 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4bb1      	ldr	r3, [pc, #708]	; (80017cc <main+0xa84>)
 8001506:	f7fe ffeb 	bl	80004e0 <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4614      	mov	r4, r2
 8001510:	461d      	mov	r5, r3
 8001512:	4baf      	ldr	r3, [pc, #700]	; (80017d0 <main+0xa88>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f92e 	bl	8000778 <__aeabi_i2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe ffda 	bl	80004dc <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fa3c 	bl	80009ac <__aeabi_d2f>
 8001534:	4602      	mov	r2, r0
 8001536:	49a7      	ldr	r1, [pc, #668]	; (80017d4 <main+0xa8c>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	601a      	str	r2, [r3, #0]
       ny2[i]=((r-36)*sin(rad*a))+cy;
 8001540:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <main+0xa7c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b24      	subs	r3, #36	; 0x24
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f916 	bl	8000778 <__aeabi_i2d>
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155a:	4b9b      	ldr	r3, [pc, #620]	; (80017c8 <main+0xa80>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7ff f918 	bl	800079c <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	ec43 2b10 	vmov	d0, r2, r3
 8001574:	f003 fea0 	bl	80052b8 <sin>
 8001578:	ec53 2b10 	vmov	r2, r3, d0
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe7e 	bl	8000280 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <main+0xa90>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f8f1 	bl	8000778 <__aeabi_i2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe ff9f 	bl	80004e0 <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff f9ff 	bl	80009ac <__aeabi_d2f>
 80015ae:	4602      	mov	r2, r0
 80015b0:	498a      	ldr	r1, [pc, #552]	; (80017dc <main+0xa94>)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	601a      	str	r2, [r3, #0]

       a++;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
       if(a==360)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015c6:	d101      	bne.n	80015cc <main+0x884>
       a=0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  for(int i=0;i<360;i++)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3301      	adds	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015d8:	f6ff abc9 	blt.w	8000d6e <main+0x26>
    }


  ST7789_Fill_Color(BLACK);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 fddd 	bl	800219c <ST7789_Fill_Color>
  ringMeter(1020, 0, 1020, 5, 10, 75,3, Aqua);
 80015e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	2303      	movs	r3, #3
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	234b      	movs	r3, #75	; 0x4b
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	230a      	movs	r3, #10
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2305      	movs	r3, #5
 80015f6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80015fa:	2100      	movs	r1, #0
 80015fc:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 8001600:	f001 fa6a 	bl	8002ad8 <ringMeter>
  ringMeter(1020, 0, 1020, 165, 10, 75,3, Aqua);
 8001604:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	2303      	movs	r3, #3
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	234b      	movs	r3, #75	; 0x4b
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	230a      	movs	r3, #10
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	23a5      	movs	r3, #165	; 0xa5
 8001618:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800161c:	2100      	movs	r1, #0
 800161e:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 8001622:	f001 fa59 	bl	8002ad8 <ringMeter>

  ringMeter1(0, 0, 1020, 13, 18, 67,2,WHITE, BWHITE);
 8001626:	2306      	movs	r3, #6
 8001628:	9304      	str	r3, [sp, #16]
 800162a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162e:	9303      	str	r3, [sp, #12]
 8001630:	2302      	movs	r3, #2
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2343      	movs	r3, #67	; 0x43
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2312      	movs	r3, #18
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	230d      	movs	r3, #13
 800163e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f001 fc53 	bl	8002ef0 <ringMeter1>
  ringMeter1(0, 0, 1020, 173, 18, 67,2,WHITE, BWHITE);
 800164a:	2306      	movs	r3, #6
 800164c:	9304      	str	r3, [sp, #16]
 800164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	2302      	movs	r3, #2
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2343      	movs	r3, #67	; 0x43
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2312      	movs	r3, #18
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	23ad      	movs	r3, #173	; 0xad
 8001662:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f001 fc41 	bl	8002ef0 <ringMeter1>

	  ringMeter1(825, 0, 1020, 20, 25, 60,2,MAGENTA, BWHITE);
 800166e:	2306      	movs	r3, #6
 8001670:	9304      	str	r3, [sp, #16]
 8001672:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	2302      	movs	r3, #2
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2319      	movs	r3, #25
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2314      	movs	r3, #20
 8001686:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800168a:	2100      	movs	r1, #0
 800168c:	f240 3039 	movw	r0, #825	; 0x339
 8001690:	f001 fc2e 	bl	8002ef0 <ringMeter1>


//	  ringMeter1(800, 0, 1020, 180, 25, 60,2,MAGENTA,BWHITE);

	     for(int i=0;i<26;i++){
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e0fe      	b.n	8001898 <main+0xb50>
	     if(i<20) {color1=Aqua; color2=WHITE;} else {color1=MAGENTA; color2=MAGENTA;}
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b13      	cmp	r3, #19
 800169e:	dc08      	bgt.n	80016b2 <main+0x96a>
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <main+0xa98>)
 80016a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <main+0xa9c>)
 80016aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <main+0x97a>
 80016b2:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <main+0xa98>)
 80016b4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <main+0xa9c>)
 80016bc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80016c0:	801a      	strh	r2, [r3, #0]

	  if(i%2==0) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f040 809f 	bne.w	800180c <main+0xac4>
		  ST7789_DrawLine(x[i*12],y[i*12],px[i*12],py[i*12],color1);
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <main+0xaa0>)
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	b298      	uxth	r0, r3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <main+0xaa4>)
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001704:	ee17 3a90 	vmov	r3, s15
 8001708:	b299      	uxth	r1, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <main+0xaa8>)
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	b29c      	uxth	r4, r3
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <main+0xaac>)
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001740:	ee17 3a90 	vmov	r3, s15
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <main+0xa98>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	4622      	mov	r2, r4
 8001750:	f000 fd82 	bl	8002258 <ST7789_DrawLine>

	  sprintf(buf, "%d", i);
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4928      	ldr	r1, [pc, #160]	; (80017f8 <main+0xab0>)
 8001758:	4828      	ldr	r0, [pc, #160]	; (80017fc <main+0xab4>)
 800175a:	f003 f8b3 	bl	80048c4 <siprintf>
	  ST7789_WriteString(lx[i*12]-5, ly[i*12]-5, buf, Font_7x10, YELLOW, BLACK);
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <main+0xab8>)
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 3a90 	vmov	r3, s15
 8001782:	b298      	uxth	r0, r3
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <main+0xabc>)
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800179c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	b299      	uxth	r1, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <main+0xac0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	9202      	str	r2, [sp, #8]
 80017b0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017b4:	9201      	str	r2, [sp, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <main+0xab4>)
 80017be:	f000 fe4d 	bl	800245c <ST7789_WriteString>
 80017c2:	e066      	b.n	8001892 <main+0xb4a>
 80017c4:	20000010 	.word	0x20000010
 80017c8:	20000014 	.word	0x20000014
 80017cc:	40740000 	.word	0x40740000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20004f54 	.word	0x20004f54
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	200054f4 	.word	0x200054f4
 80017e0:	20000092 	.word	0x20000092
 80017e4:	20000090 	.word	0x20000090
 80017e8:	20000094 	.word	0x20000094
 80017ec:	20000634 	.word	0x20000634
 80017f0:	20000bd4 	.word	0x20000bd4
 80017f4:	20001174 	.word	0x20001174
 80017f8:	08006350 	.word	0x08006350
 80017fc:	20005a94 	.word	0x20005a94
 8001800:	20001714 	.word	0x20001714
 8001804:	20001cb4 	.word	0x20001cb4
 8001808:	20000000 	.word	0x20000000
	  }else
		  ST7789_DrawLine(x[i*12],y[i*12],px[i*12],py[i*12],color2);
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4aae      	ldr	r2, [pc, #696]	; (8001ad0 <main+0xd88>)
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	b298      	uxth	r0, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4aa7      	ldr	r2, [pc, #668]	; (8001ad4 <main+0xd8c>)
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001842:	ee17 3a90 	vmov	r3, s15
 8001846:	b299      	uxth	r1, r3
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4aa1      	ldr	r2, [pc, #644]	; (8001ad8 <main+0xd90>)
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
 8001864:	b29c      	uxth	r4, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4a9a      	ldr	r2, [pc, #616]	; (8001adc <main+0xd94>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <main+0xd98>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	4622      	mov	r2, r4
 800188e:	f000 fce3 	bl	8002258 <ST7789_DrawLine>
	     for(int i=0;i<26;i++){
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b19      	cmp	r3, #25
 800189c:	f77f aefd 	ble.w	800169a <main+0x952>
	  }

	      for(int i=0;i<19;i++){
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	e0bd      	b.n	8001a22 <main+0xcda>
	      if(i<20) {color1=Aqua; color2=WHITE;} else {color1=MAGENTA; color2=MAGENTA;}
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b13      	cmp	r3, #19
 80018aa:	dc08      	bgt.n	80018be <main+0xb76>
 80018ac:	4b8d      	ldr	r3, [pc, #564]	; (8001ae4 <main+0xd9c>)
 80018ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018b2:	801a      	strh	r2, [r3, #0]
 80018b4:	4b8a      	ldr	r3, [pc, #552]	; (8001ae0 <main+0xd98>)
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	e007      	b.n	80018ce <main+0xb86>
 80018be:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <main+0xd9c>)
 80018c0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	4b86      	ldr	r3, [pc, #536]	; (8001ae0 <main+0xd98>)
 80018c8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80018cc:	801a      	strh	r2, [r3, #0]

	  if(i%2==0) {
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d16b      	bne.n	80019b0 <main+0xc68>
		  ST7789_DrawLine(x2[i*16],y2[i*16],px2[i*16],py2[i*16],color1);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	4a82      	ldr	r2, [pc, #520]	; (8001ae8 <main+0xda0>)
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	b298      	uxth	r0, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4a7d      	ldr	r2, [pc, #500]	; (8001aec <main+0xda4>)
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001902:	ee17 3a90 	vmov	r3, s15
 8001906:	b299      	uxth	r1, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4a78      	ldr	r2, [pc, #480]	; (8001af0 <main+0xda8>)
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
 800191e:	b29a      	uxth	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4c73      	ldr	r4, [pc, #460]	; (8001af4 <main+0xdac>)
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4423      	add	r3, r4
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	b29c      	uxth	r4, r3
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <main+0xd9c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4623      	mov	r3, r4
 8001940:	f000 fc8a 	bl	8002258 <ST7789_DrawLine>

	  sprintf(buf, "%d", i/2);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0fda      	lsrs	r2, r3, #31
 8001948:	4413      	add	r3, r2
 800194a:	105b      	asrs	r3, r3, #1
 800194c:	461a      	mov	r2, r3
 800194e:	496a      	ldr	r1, [pc, #424]	; (8001af8 <main+0xdb0>)
 8001950:	486a      	ldr	r0, [pc, #424]	; (8001afc <main+0xdb4>)
 8001952:	f002 ffb7 	bl	80048c4 <siprintf>
	  ST7789_WriteString(lx2[i*16]-3, ly2[i*16]-3, buf, Font_7x10, YELLOW, BLACK);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <main+0xdb8>)
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b298      	uxth	r0, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4a62      	ldr	r2, [pc, #392]	; (8001b04 <main+0xdbc>)
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800198c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001990:	ee17 3a90 	vmov	r3, s15
 8001994:	b299      	uxth	r1, r3
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <main+0xdc0>)
 8001998:	2200      	movs	r2, #0
 800199a:	9202      	str	r2, [sp, #8]
 800199c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80019a0:	9201      	str	r2, [sp, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	9200      	str	r2, [sp, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <main+0xdb4>)
 80019aa:	f000 fd57 	bl	800245c <ST7789_WriteString>
 80019ae:	e035      	b.n	8001a1c <main+0xcd4>
	  }else
		  ST7789_DrawLine(x2[i*16],y2[i*16],px2[i*16],py2[i*16],color2);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <main+0xda0>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	b298      	uxth	r0, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4a47      	ldr	r2, [pc, #284]	; (8001aec <main+0xda4>)
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	b299      	uxth	r1, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4a42      	ldr	r2, [pc, #264]	; (8001af0 <main+0xda8>)
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f2:	ee17 3a90 	vmov	r3, s15
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4c3d      	ldr	r4, [pc, #244]	; (8001af4 <main+0xdac>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	b29c      	uxth	r4, r3
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <main+0xd98>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4623      	mov	r3, r4
 8001a18:	f000 fc1e 	bl	8002258 <ST7789_DrawLine>
	      for(int i=0;i<19;i++){
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b12      	cmp	r3, #18
 8001a26:	f77f af3e 	ble.w	80018a6 <main+0xb5e>
	  }


	  ST7789_WriteString(60, 140, "SPEED", Font_7x10, YELLOW, BLACK);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <main+0xdc0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <main+0xdc4>)
 8001a3e:	218c      	movs	r1, #140	; 0x8c
 8001a40:	203c      	movs	r0, #60	; 0x3c
 8001a42:	f000 fd0b 	bl	800245c <ST7789_WriteString>
	  ST7789_WriteString(60, 150, "x10", Font_7x10, YELLOW, BLACK);
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <main+0xdc0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	9202      	str	r2, [sp, #8]
 8001a4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a50:	9201      	str	r2, [sp, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <main+0xdc8>)
 8001a5a:	2196      	movs	r1, #150	; 0x96
 8001a5c:	203c      	movs	r0, #60	; 0x3c
 8001a5e:	f000 fcfd 	bl	800245c <ST7789_WriteString>

	  ST7789_WriteString(225, 140, "RPM", Font_7x10, YELLOW, BLACK);
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <main+0xdc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	9202      	str	r2, [sp, #8]
 8001a68:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <main+0xdcc>)
 8001a76:	218c      	movs	r1, #140	; 0x8c
 8001a78:	20e1      	movs	r0, #225	; 0xe1
 8001a7a:	f000 fcef 	bl	800245c <ST7789_WriteString>
	  ST7789_WriteString(225, 150, "x1000", Font_7x10, YELLOW, BLACK);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <main+0xdc0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <main+0xdd0>)
 8001a92:	2196      	movs	r1, #150	; 0x96
 8001a94:	20e1      	movs	r0, #225	; 0xe1
 8001a96:	f000 fce1 	bl	800245c <ST7789_WriteString>

	  fillTriangle(130, 15, 150, 5, 150, 25, BLUE);
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2396      	movs	r3, #150	; 0x96
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	2296      	movs	r2, #150	; 0x96
 8001aaa:	210f      	movs	r1, #15
 8001aac:	2082      	movs	r0, #130	; 0x82
 8001aae:	f000 febf 	bl	8002830 <fillTriangle>
	  fillTriangle(170, 5, 170, 25, 190, 15, BLUE);
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	230f      	movs	r3, #15
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	23be      	movs	r3, #190	; 0xbe
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2319      	movs	r3, #25
 8001ac0:	22aa      	movs	r2, #170	; 0xaa
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	20aa      	movs	r0, #170	; 0xaa
 8001ac6:	f000 feb3 	bl	8002830 <fillTriangle>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  for (int i = 0; i <= 1019; i+=50) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	e0c9      	b.n	8001c64 <main+0xf1c>
 8001ad0:	20000094 	.word	0x20000094
 8001ad4:	20000634 	.word	0x20000634
 8001ad8:	20000bd4 	.word	0x20000bd4
 8001adc:	20001174 	.word	0x20001174
 8001ae0:	20000090 	.word	0x20000090
 8001ae4:	20000092 	.word	0x20000092
 8001ae8:	20002d94 	.word	0x20002d94
 8001aec:	20003334 	.word	0x20003334
 8001af0:	200038d4 	.word	0x200038d4
 8001af4:	20003e74 	.word	0x20003e74
 8001af8:	08006350 	.word	0x08006350
 8001afc:	20005a94 	.word	0x20005a94
 8001b00:	20004414 	.word	0x20004414
 8001b04:	200049b4 	.word	0x200049b4
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	08006354 	.word	0x08006354
 8001b10:	0800635c 	.word	0x0800635c
 8001b14:	08006360 	.word	0x08006360
 8001b18:	08006364 	.word	0x08006364

		    ringMeter(i, 0, 1020, 50, 55, 30,7, GREEN2RED);
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	2307      	movs	r3, #7
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	231e      	movs	r3, #30
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2337      	movs	r3, #55	; 0x37
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2332      	movs	r3, #50	; 0x32
 8001b2e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ffcf 	bl	8002ad8 <ringMeter>
		    ringMeter(i, 0, 1020, 210, 55, 30,7, GREEN2RED);
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	2307      	movs	r3, #7
 8001b40:	9302      	str	r3, [sp, #8]
 8001b42:	231e      	movs	r3, #30
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2337      	movs	r3, #55	; 0x37
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	23d2      	movs	r3, #210	; 0xd2
 8001b4c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001b50:	2100      	movs	r1, #0
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 ffc0 	bl	8002ad8 <ringMeter>

			  fillTriangle(130, 15, 150, 5, 150, 25, BLUE);
 8001b58:	231f      	movs	r3, #31
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2319      	movs	r3, #25
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2396      	movs	r3, #150	; 0x96
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2305      	movs	r3, #5
 8001b66:	2296      	movs	r2, #150	; 0x96
 8001b68:	210f      	movs	r1, #15
 8001b6a:	2082      	movs	r0, #130	; 0x82
 8001b6c:	f000 fe60 	bl	8002830 <fillTriangle>
			  fillTriangle(170, 5, 170, 25, 190, 15, BLUE);
 8001b70:	231f      	movs	r3, #31
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	230f      	movs	r3, #15
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	23be      	movs	r3, #190	; 0xbe
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	22aa      	movs	r2, #170	; 0xaa
 8001b80:	2105      	movs	r1, #5
 8001b82:	20aa      	movs	r0, #170	; 0xaa
 8001b84:	f000 fe54 	bl	8002830 <fillTriangle>
			  ST7789_DrawFilledCircle(310, 10, 5, RED);
 8001b88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	210a      	movs	r1, #10
 8001b90:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001b94:	f000 fcfb 	bl	800258e <ST7789_DrawFilledCircle>
			  ST7789_DrawFilledRectangle(0, 5, 10, 10, GREEN);
 8001b98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f000 fca2 	bl	80024ee <ST7789_DrawFilledRectangle>


			  HAL_Delay(300);
 8001baa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bae:	f001 fd2d 	bl	800360c <HAL_Delay>
			  fillTriangle(130, 15, 150, 5, 150, 25, YELLOW);
 8001bb2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	2319      	movs	r3, #25
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2396      	movs	r3, #150	; 0x96
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	2296      	movs	r2, #150	; 0x96
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	2082      	movs	r0, #130	; 0x82
 8001bc8:	f000 fe32 	bl	8002830 <fillTriangle>
			  fillTriangle(170, 5, 170, 25, 190, 15, YELLOW);
 8001bcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	23be      	movs	r3, #190	; 0xbe
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2319      	movs	r3, #25
 8001bdc:	22aa      	movs	r2, #170	; 0xaa
 8001bde:	2105      	movs	r1, #5
 8001be0:	20aa      	movs	r0, #170	; 0xaa
 8001be2:	f000 fe25 	bl	8002830 <fillTriangle>
			  ST7789_DrawFilledCircle(310, 10, 5, BLACK);
 8001be6:	2300      	movs	r3, #0
 8001be8:	2205      	movs	r2, #5
 8001bea:	210a      	movs	r1, #10
 8001bec:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001bf0:	f000 fccd 	bl	800258e <ST7789_DrawFilledCircle>
			  ST7789_DrawFilledRectangle(0, 5, 10, 10, BLACK);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	220a      	movs	r2, #10
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 fc75 	bl	80024ee <ST7789_DrawFilledRectangle>


			  HAL_Delay(300);
 8001c04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c08:	f001 fd00 	bl	800360c <HAL_Delay>
			  fillTriangle(130, 15, 150, 5, 150, 25, BLUE);
 8001c0c:	231f      	movs	r3, #31
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2319      	movs	r3, #25
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2396      	movs	r3, #150	; 0x96
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2305      	movs	r3, #5
 8001c1a:	2296      	movs	r2, #150	; 0x96
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	2082      	movs	r0, #130	; 0x82
 8001c20:	f000 fe06 	bl	8002830 <fillTriangle>
			  fillTriangle(170, 5, 170, 25, 190, 15, BLUE);
 8001c24:	231f      	movs	r3, #31
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	230f      	movs	r3, #15
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	23be      	movs	r3, #190	; 0xbe
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2319      	movs	r3, #25
 8001c32:	22aa      	movs	r2, #170	; 0xaa
 8001c34:	2105      	movs	r1, #5
 8001c36:	20aa      	movs	r0, #170	; 0xaa
 8001c38:	f000 fdfa 	bl	8002830 <fillTriangle>
			  ST7789_DrawFilledCircle(310, 10, 5, RED);
 8001c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c40:	2205      	movs	r2, #5
 8001c42:	210a      	movs	r1, #10
 8001c44:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001c48:	f000 fca1 	bl	800258e <ST7789_DrawFilledCircle>
			  ST7789_DrawFilledRectangle(0, 5, 10, 10, GREEN);
 8001c4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	230a      	movs	r3, #10
 8001c54:	220a      	movs	r2, #10
 8001c56:	2105      	movs	r1, #5
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 fc48 	bl	80024ee <ST7789_DrawFilledRectangle>
	  for (int i = 0; i <= 1019; i+=50) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3332      	adds	r3, #50	; 0x32
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8001c6a:	f6ff af57 	blt.w	8001b1c <main+0xdd4>
 8001c6e:	e72c      	b.n	8001aca <main+0xd82>

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b094      	sub	sp, #80	; 0x50
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	f107 0320 	add.w	r3, r7, #32
 8001c7a:	2230      	movs	r2, #48	; 0x30
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fe40 	bl	8004904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <SystemClock_Config+0xcc>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <SystemClock_Config+0xcc>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <SystemClock_Config+0xcc>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001ce8:	2354      	movs	r3, #84	; 0x54
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 ff2f 	bl	8003b5c <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d04:	f000 f8a4 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2102      	movs	r1, #2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 f991 	bl	800404c <HAL_RCC_ClockConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d30:	f000 f88e 	bl	8001e50 <Error_Handler>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3750      	adds	r7, #80	; 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000

08001d44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <MX_SPI1_Init+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d90:	220a      	movs	r2, #10
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_SPI1_Init+0x64>)
 8001d96:	f002 fb05 	bl	80043a4 <HAL_SPI_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001da0:	f000 f856 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20005aa8 	.word	0x20005aa8
 8001dac:	40013000 	.word	0x40013000

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_GPIO_Init+0x98>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_CS_Pin|ST7789_RST_Pin|ST7789_DC_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2107      	movs	r1, #7
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e20:	f001 fe82 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_CS_Pin ST7789_RST_Pin ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|ST7789_RST_Pin|ST7789_DC_Pin;
 8001e24:	2307      	movs	r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e3c:	f001 fcf0 	bl	8003820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020400 	.word	0x40020400

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>

08001e5a <map>:
//#include "stdbool.h"
#include "math.h"

#define swap(a, b) { int16_t t = a; a = b; b = t; }

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	1a8a      	subs	r2, r1, r2
 8001e74:	fb03 f202 	mul.w	r2, r3, r2
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1acb      	subs	r3, r1, r3
 8001e7e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4413      	add	r3, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001e9e:	bf00      	nop
	ST7789_DC_Clr();
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <ST7789_WriteCommand+0x30>)
 8001ea6:	f001 fe3f 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001eaa:	1df9      	adds	r1, r7, #7
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <ST7789_WriteCommand+0x34>)
 8001eb4:	f002 faff 	bl	80044b6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001eb8:	bf00      	nop
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	20005aa8 	.word	0x20005aa8

08001ecc <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001ed6:	bf00      	nop
	ST7789_DC_Set();
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2104      	movs	r1, #4
 8001edc:	4810      	ldr	r0, [pc, #64]	; (8001f20 <ST7789_WriteData+0x54>)
 8001ede:	f001 fe23 	bl	8003b28 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001ee2:	e015      	b.n	8001f10 <ST7789_WriteData+0x44>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eea:	4293      	cmp	r3, r2
 8001eec:	bf28      	it	cs
 8001eee:	4613      	movcs	r3, r2
 8001ef0:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001ef2:	89fa      	ldrh	r2, [r7, #14]
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	480a      	ldr	r0, [pc, #40]	; (8001f24 <ST7789_WriteData+0x58>)
 8001efc:	f002 fadb 	bl	80044b6 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001f08:	89fb      	ldrh	r3, [r7, #14]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1e6      	bne.n	8001ee4 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 8001f16:	bf00      	nop
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40020400 	.word	0x40020400
 8001f24:	20005aa8 	.word	0x20005aa8

08001f28 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001f32:	bf00      	nop
	ST7789_DC_Set();
 8001f34:	2201      	movs	r2, #1
 8001f36:	2104      	movs	r1, #4
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <ST7789_WriteSmallData+0x30>)
 8001f3a:	f001 fdf5 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2201      	movs	r2, #1
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <ST7789_WriteSmallData+0x34>)
 8001f48:	f002 fab5 	bl	80044b6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001f4c:	bf00      	nop
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	20005aa8 	.word	0x20005aa8

08001f60 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001f6a:	2036      	movs	r0, #54	; 0x36
 8001f6c:	f7ff ff92 	bl	8001e94 <ST7789_WriteCommand>
	switch (m) {
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d81a      	bhi.n	8001fac <ST7789_SetRotation+0x4c>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <ST7789_SetRotation+0x1c>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fa5 	.word	0x08001fa5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001f8c:	20c0      	movs	r0, #192	; 0xc0
 8001f8e:	f7ff ffcb 	bl	8001f28 <ST7789_WriteSmallData>
		break;
 8001f92:	e00c      	b.n	8001fae <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001f94:	20a0      	movs	r0, #160	; 0xa0
 8001f96:	f7ff ffc7 	bl	8001f28 <ST7789_WriteSmallData>
		break;
 8001f9a:	e008      	b.n	8001fae <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff ffc3 	bl	8001f28 <ST7789_WriteSmallData>
		break;
 8001fa2:	e004      	b.n	8001fae <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001fa4:	2060      	movs	r0, #96	; 0x60
 8001fa6:	f7ff ffbf 	bl	8001f28 <ST7789_WriteSmallData>
		break;
 8001faa:	e000      	b.n	8001fae <ST7789_SetRotation+0x4e>
	default:
		break;
 8001fac:	bf00      	nop
	}
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	80fb      	strh	r3, [r7, #6]
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80bb      	strh	r3, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001fd6:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	82fb      	strh	r3, [r7, #22]
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	3323      	adds	r3, #35	; 0x23
 8001fe4:	827b      	strh	r3, [r7, #18]
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	3323      	adds	r3, #35	; 0x23
 8001fea:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001fec:	202a      	movs	r0, #42	; 0x2a
 8001fee:	f7ff ff51 	bl	8001e94 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001ff2:	8afb      	ldrh	r3, [r7, #22]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	733b      	strb	r3, [r7, #12]
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	737b      	strb	r3, [r7, #13]
 8002002:	8abb      	ldrh	r3, [r7, #20]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
 800200c:	8abb      	ldrh	r3, [r7, #20]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2104      	movs	r1, #4
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff57 	bl	8001ecc <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800201e:	202b      	movs	r0, #43	; 0x2b
 8002020:	f7ff ff38 	bl	8001e94 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002024:	8a7b      	ldrh	r3, [r7, #18]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	723b      	strb	r3, [r7, #8]
 800202e:	8a7b      	ldrh	r3, [r7, #18]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	727b      	strb	r3, [r7, #9]
 8002034:	8a3b      	ldrh	r3, [r7, #16]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	b29b      	uxth	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	72bb      	strb	r3, [r7, #10]
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	2104      	movs	r1, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff3e 	bl	8001ecc <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002050:	202c      	movs	r0, #44	; 0x2c
 8002052:	f7ff ff1f 	bl	8001e94 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002056:	bf00      	nop
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}

08002060 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8002066:	2019      	movs	r0, #25
 8002068:	f001 fad0 	bl	800360c <HAL_Delay>
    ST7789_RST_Clr();
 800206c:	2200      	movs	r2, #0
 800206e:	2102      	movs	r1, #2
 8002070:	4846      	ldr	r0, [pc, #280]	; (800218c <ST7789_Init+0x12c>)
 8002072:	f001 fd59 	bl	8003b28 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8002076:	2019      	movs	r0, #25
 8002078:	f001 fac8 	bl	800360c <HAL_Delay>
    ST7789_RST_Set();
 800207c:	2201      	movs	r2, #1
 800207e:	2102      	movs	r1, #2
 8002080:	4842      	ldr	r0, [pc, #264]	; (800218c <ST7789_Init+0x12c>)
 8002082:	f001 fd51 	bl	8003b28 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002086:	2032      	movs	r0, #50	; 0x32
 8002088:	f001 fac0 	bl	800360c <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800208c:	203a      	movs	r0, #58	; 0x3a
 800208e:	f7ff ff01 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002092:	2055      	movs	r0, #85	; 0x55
 8002094:	f7ff ff48 	bl	8001f28 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002098:	20b2      	movs	r0, #178	; 0xb2
 800209a:	f7ff fefb 	bl	8001e94 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800209e:	4a3c      	ldr	r2, [pc, #240]	; (8002190 <ST7789_Init+0x130>)
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a8:	6018      	str	r0, [r3, #0]
 80020aa:	3304      	adds	r3, #4
 80020ac:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	2105      	movs	r1, #5
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff09 	bl	8001ecc <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff ff50 	bl	8001f60 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80020c0:	20b7      	movs	r0, #183	; 0xb7
 80020c2:	f7ff fee7 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80020c6:	2035      	movs	r0, #53	; 0x35
 80020c8:	f7ff ff2e 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80020cc:	20bb      	movs	r0, #187	; 0xbb
 80020ce:	f7ff fee1 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80020d2:	2019      	movs	r0, #25
 80020d4:	f7ff ff28 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80020d8:	20c0      	movs	r0, #192	; 0xc0
 80020da:	f7ff fedb 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80020de:	202c      	movs	r0, #44	; 0x2c
 80020e0:	f7ff ff22 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80020e4:	20c2      	movs	r0, #194	; 0xc2
 80020e6:	f7ff fed5 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff ff1c 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80020f0:	20c3      	movs	r0, #195	; 0xc3
 80020f2:	f7ff fecf 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80020f6:	2012      	movs	r0, #18
 80020f8:	f7ff ff16 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80020fc:	20c4      	movs	r0, #196	; 0xc4
 80020fe:	f7ff fec9 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8002102:	2020      	movs	r0, #32
 8002104:	f7ff ff10 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002108:	20c6      	movs	r0, #198	; 0xc6
 800210a:	f7ff fec3 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800210e:	200f      	movs	r0, #15
 8002110:	f7ff ff0a 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002114:	20d0      	movs	r0, #208	; 0xd0
 8002116:	f7ff febd 	bl	8001e94 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800211a:	20a4      	movs	r0, #164	; 0xa4
 800211c:	f7ff ff04 	bl	8001f28 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002120:	20a1      	movs	r0, #161	; 0xa1
 8002122:	f7ff ff01 	bl	8001f28 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002126:	20e0      	movs	r0, #224	; 0xe0
 8002128:	f7ff feb4 	bl	8001e94 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <ST7789_Init+0x134>)
 800212e:	f107 0410 	add.w	r4, r7, #16
 8002132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002134:	c407      	stmia	r4!, {r0, r1, r2}
 8002136:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	210e      	movs	r1, #14
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fec4 	bl	8001ecc <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002144:	20e1      	movs	r0, #225	; 0xe1
 8002146:	f7ff fea5 	bl	8001e94 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <ST7789_Init+0x138>)
 800214c:	463c      	mov	r4, r7
 800214e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002150:	c407      	stmia	r4!, {r0, r1, r2}
 8002152:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002154:	463b      	mov	r3, r7
 8002156:	210e      	movs	r1, #14
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feb7 	bl	8001ecc <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800215e:	2021      	movs	r0, #33	; 0x21
 8002160:	f7ff fe98 	bl	8001e94 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002164:	2011      	movs	r0, #17
 8002166:	f7ff fe95 	bl	8001e94 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800216a:	2013      	movs	r0, #19
 800216c:	f7ff fe92 	bl	8001e94 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002170:	2029      	movs	r0, #41	; 0x29
 8002172:	f7ff fe8f 	bl	8001e94 <ST7789_WriteCommand>

	HAL_Delay(50);
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f001 fa48 	bl	800360c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800217c:	2000      	movs	r0, #0
 800217e:	f000 f80d 	bl	800219c <ST7789_Fill_Color>
}
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop
 800218c:	40020400 	.word	0x40020400
 8002190:	0800636c 	.word	0x0800636c
 8002194:	08006374 	.word	0x08006374
 8002198:	08006384 	.word	0x08006384

0800219c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80021a6:	23a9      	movs	r3, #169	; 0xa9
 80021a8:	f240 123f 	movw	r2, #319	; 0x13f
 80021ac:	2100      	movs	r1, #0
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff ff02 	bl	8001fb8 <ST7789_SetAddressWindow>
	ST7789_Select();
 80021b4:	bf00      	nop
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	81fb      	strh	r3, [r7, #14]
 80021ba:	e019      	b.n	80021f0 <ST7789_Fill_Color+0x54>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80021bc:	2300      	movs	r3, #0
 80021be:	81bb      	strh	r3, [r7, #12]
 80021c0:	e010      	b.n	80021e4 <ST7789_Fill_Color+0x48>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	723b      	strb	r3, [r7, #8]
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fe77 	bl	8001ecc <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	81bb      	strh	r3, [r7, #12]
 80021e4:	89bb      	ldrh	r3, [r7, #12]
 80021e6:	2ba9      	cmp	r3, #169	; 0xa9
 80021e8:	d9eb      	bls.n	80021c2 <ST7789_Fill_Color+0x26>
		for (i = 0; i < ST7789_WIDTH; i++)
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	3301      	adds	r3, #1
 80021ee:	81fb      	strh	r3, [r7, #14]
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021f6:	d3e1      	bcc.n	80021bc <ST7789_Fill_Color+0x20>
				}
	#endif
	ST7789_UnSelect();
 80021f8:	bf00      	nop
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	80fb      	strh	r3, [r7, #6]
 800220c:	460b      	mov	r3, r1
 800220e:	80bb      	strh	r3, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800221a:	d219      	bcs.n	8002250 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800221c:	88bb      	ldrh	r3, [r7, #4]
 800221e:	2ba9      	cmp	r3, #169	; 0xa9
 8002220:	d816      	bhi.n	8002250 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	88b9      	ldrh	r1, [r7, #4]
 8002228:	88f8      	ldrh	r0, [r7, #6]
 800222a:	f7ff fec5 	bl	8001fb8 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	733b      	strb	r3, [r7, #12]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800223e:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2102      	movs	r1, #2
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fe40 	bl	8001ecc <ST7789_WriteData>
	ST7789_UnSelect();
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002250:	bf00      	nop
}
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	4604      	mov	r4, r0
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4623      	mov	r3, r4
 8002268:	80fb      	strh	r3, [r7, #6]
 800226a:	4603      	mov	r3, r0
 800226c:	80bb      	strh	r3, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
 8002272:	4613      	mov	r3, r2
 8002274:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8002276:	883a      	ldrh	r2, [r7, #0]
 8002278:	88bb      	ldrh	r3, [r7, #4]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002280:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002284:	8879      	ldrh	r1, [r7, #2]
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	1acb      	subs	r3, r1, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bfb8      	it	lt
 800228e:	425b      	neglt	r3, r3
 8002290:	429a      	cmp	r2, r3
 8002292:	bfcc      	ite	gt
 8002294:	2301      	movgt	r3, #1
 8002296:	2300      	movle	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	827b      	strh	r3, [r7, #18]
    if (steep) {
 800229c:	8a7b      	ldrh	r3, [r7, #18]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <ST7789_DrawLine+0x62>
		swap = x0;
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80022aa:	8a3b      	ldrh	r3, [r7, #16]
 80022ac:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80022b2:	883b      	ldrh	r3, [r7, #0]
 80022b4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80022b6:	8a3b      	ldrh	r3, [r7, #16]
 80022b8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d90b      	bls.n	80022da <ST7789_DrawLine+0x82>
		swap = x0;
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80022ca:	8a3b      	ldrh	r3, [r7, #16]
 80022cc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80022d2:	883b      	ldrh	r3, [r7, #0]
 80022d4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80022d6:	8a3b      	ldrh	r3, [r7, #16]
 80022d8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80022e4:	883a      	ldrh	r2, [r7, #0]
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfb8      	it	lt
 80022ee:	425b      	neglt	r3, r3
 80022f0:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 80022f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f6:	0fda      	lsrs	r2, r3, #31
 80022f8:	4413      	add	r3, r2
 80022fa:	105b      	asrs	r3, r3, #1
 80022fc:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80022fe:	88ba      	ldrh	r2, [r7, #4]
 8002300:	883b      	ldrh	r3, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d202      	bcs.n	800230c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	82bb      	strh	r3, [r7, #20]
 800230a:	e028      	b.n	800235e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800230c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002310:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8002312:	e024      	b.n	800235e <ST7789_DrawLine+0x106>
        if (steep) {
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800231a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800231c:	88f9      	ldrh	r1, [r7, #6]
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff6e 	bl	8002202 <ST7789_DrawPixel>
 8002326:	e005      	b.n	8002334 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002328:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232a:	88b9      	ldrh	r1, [r7, #4]
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff67 	bl	8002202 <ST7789_DrawPixel>
        }
        err -= dy;
 8002334:	8afa      	ldrh	r2, [r7, #22]
 8002336:	89bb      	ldrh	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b29b      	uxth	r3, r3
 800233c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800233e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da08      	bge.n	8002358 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002346:	8aba      	ldrh	r2, [r7, #20]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800234e:	8afa      	ldrh	r2, [r7, #22]
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	4413      	add	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	3301      	adds	r3, #1
 800235c:	80fb      	strh	r3, [r7, #6]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	429a      	cmp	r2, r3
 8002364:	d9d6      	bls.n	8002314 <ST7789_DrawLine+0xbc>
        }
    }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}

08002370 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002370:	b082      	sub	sp, #8
 8002372:	b590      	push	{r4, r7, lr}
 8002374:	b089      	sub	sp, #36	; 0x24
 8002376:	af00      	add	r7, sp, #0
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
 800237e:	460b      	mov	r3, r1
 8002380:	80bb      	strh	r3, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002386:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002388:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800238c:	b29a      	uxth	r2, r3
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29c      	uxth	r4, r3
 8002398:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800239c:	b29a      	uxth	r2, r3
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	88b9      	ldrh	r1, [r7, #4]
 80023aa:	88f8      	ldrh	r0, [r7, #6]
 80023ac:	4622      	mov	r2, r4
 80023ae:	f7ff fe03 	bl	8001fb8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e043      	b.n	8002440 <ST7789_WriteChar+0xd0>
		b = font.data[(ch - 32) * font.height + i];
 80023b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	3b20      	subs	r3, #32
 80023be:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	440b      	add	r3, r1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e029      	b.n	800242e <ST7789_WriteChar+0xbe>
			if ((b << j) & 0x8000) {
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <ST7789_WriteChar+0x98>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80023ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	743b      	strb	r3, [r7, #16]
 80023f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fd63 	bl	8001ecc <ST7789_WriteData>
 8002406:	e00f      	b.n	8002428 <ST7789_WriteChar+0xb8>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002408:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	733b      	strb	r3, [r7, #12]
 8002414:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002418:	b2db      	uxtb	r3, r3
 800241a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd52 	bl	8001ecc <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3301      	adds	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002432:	461a      	mov	r2, r3
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4293      	cmp	r3, r2
 8002438:	d3cf      	bcc.n	80023da <ST7789_WriteChar+0x6a>
	for (i = 0; i < font.height; i++) {
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002444:	461a      	mov	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4293      	cmp	r3, r2
 800244a:	d3b5      	bcc.n	80023b8 <ST7789_WriteChar+0x48>
			}
		}
	}
	ST7789_UnSelect();
 800244c:	bf00      	nop
}
 800244e:	bf00      	nop
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002458:	b002      	add	sp, #8
 800245a:	4770      	bx	lr

0800245c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800245c:	b082      	sub	sp, #8
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af04      	add	r7, sp, #16
 8002464:	603a      	str	r2, [r7, #0]
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	4603      	mov	r3, r0
 800246a:	80fb      	strh	r3, [r7, #6]
 800246c:	460b      	mov	r3, r1
 800246e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002470:	bf00      	nop
	while (*str) {
 8002472:	e02e      	b.n	80024d2 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	7d3a      	ldrb	r2, [r7, #20]
 8002478:	4413      	add	r3, r2
 800247a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800247e:	db13      	blt.n	80024a8 <ST7789_WriteString+0x4c>
			x = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002484:	7d7b      	ldrb	r3, [r7, #21]
 8002486:	b29a      	uxth	r2, r3
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800248e:	88bb      	ldrh	r3, [r7, #4]
 8002490:	7d7a      	ldrb	r2, [r7, #21]
 8002492:	4413      	add	r3, r2
 8002494:	2ba9      	cmp	r3, #169	; 0xa9
 8002496:	dc21      	bgt.n	80024dc <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b20      	cmp	r3, #32
 800249e:	d103      	bne.n	80024a8 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	603b      	str	r3, [r7, #0]
				continue;
 80024a6:	e014      	b.n	80024d2 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	88b9      	ldrh	r1, [r7, #4]
 80024ae:	88f8      	ldrh	r0, [r7, #6]
 80024b0:	8c3b      	ldrh	r3, [r7, #32]
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	8bbb      	ldrh	r3, [r7, #28]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f7ff ff57 	bl	8002370 <ST7789_WriteChar>
		x += font.width;
 80024c2:	7d3b      	ldrb	r3, [r7, #20]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	80fb      	strh	r3, [r7, #6]
		str++;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	603b      	str	r3, [r7, #0]
	while (*str) {
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1cc      	bne.n	8002474 <ST7789_WriteString+0x18>
 80024da:	e000      	b.n	80024de <ST7789_WriteString+0x82>
				break;
 80024dc:	bf00      	nop
	}
	ST7789_UnSelect();
 80024de:	bf00      	nop
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ea:	b002      	add	sp, #8
 80024ec:	4770      	bx	lr

080024ee <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80024ee:	b590      	push	{r4, r7, lr}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	4604      	mov	r4, r0
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4623      	mov	r3, r4
 80024fe:	80fb      	strh	r3, [r7, #6]
 8002500:	4603      	mov	r3, r0
 8002502:	80bb      	strh	r3, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
 8002508:	4613      	mov	r3, r2
 800250a:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800250c:	bf00      	nop
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002514:	d237      	bcs.n	8002586 <ST7789_DrawFilledRectangle+0x98>
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	2ba9      	cmp	r3, #169	; 0xa9
 800251a:	d834      	bhi.n	8002586 <ST7789_DrawFilledRectangle+0x98>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	4413      	add	r3, r2
 8002522:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002526:	db03      	blt.n	8002530 <ST7789_DrawFilledRectangle+0x42>
		w = ST7789_WIDTH - x;
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800252e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8002530:	88ba      	ldrh	r2, [r7, #4]
 8002532:	883b      	ldrh	r3, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	2ba9      	cmp	r3, #169	; 0xa9
 8002538:	dd03      	ble.n	8002542 <ST7789_DrawFilledRectangle+0x54>
		h = ST7789_HEIGHT - y;
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8002540:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e017      	b.n	8002578 <ST7789_DrawFilledRectangle+0x8a>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	b29a      	uxth	r2, r3
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	b299      	uxth	r1, r3
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4413      	add	r3, r2
 8002558:	b29c      	uxth	r4, r3
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	b29a      	uxth	r2, r3
 800255e:	88bb      	ldrh	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	88f8      	ldrh	r0, [r7, #6]
 8002566:	8c3b      	ldrh	r3, [r7, #32]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	4622      	mov	r2, r4
 800256e:	f7ff fe73 	bl	8002258 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	3301      	adds	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	b29b      	uxth	r3, r3
 800257c:	883a      	ldrh	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d2e2      	bcs.n	8002548 <ST7789_DrawFilledRectangle+0x5a>
	}
	ST7789_UnSelect();
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <ST7789_DrawFilledRectangle+0x9a>
		return;
 8002586:	bf00      	nop
}
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}

0800258e <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800258e:	b590      	push	{r4, r7, lr}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	af02      	add	r7, sp, #8
 8002594:	4604      	mov	r4, r0
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	80fb      	strh	r3, [r7, #6]
 80025a0:	4603      	mov	r3, r0
 80025a2:	80bb      	strh	r3, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80025ac:	bf00      	nop
	int16_t f = 1 - r;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	f1c3 0301 	rsb	r3, r3, #1
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	461a      	mov	r2, r3
 80025c0:	03d2      	lsls	r2, r2, #15
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 80025d2:	88f8      	ldrh	r0, [r7, #6]
 80025d4:	88ba      	ldrh	r2, [r7, #4]
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	4413      	add	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	883a      	ldrh	r2, [r7, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	f7ff fe0f 	bl	8002202 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80025e4:	88f8      	ldrh	r0, [r7, #6]
 80025e6:	88ba      	ldrh	r2, [r7, #4]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	883a      	ldrh	r2, [r7, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7ff fe06 	bl	8002202 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4413      	add	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	88b9      	ldrh	r1, [r7, #4]
 8002600:	883a      	ldrh	r2, [r7, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fdfd 	bl	8002202 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	b29b      	uxth	r3, r3
 8002610:	88b9      	ldrh	r1, [r7, #4]
 8002612:	883a      	ldrh	r2, [r7, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fdf4 	bl	8002202 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	b298      	uxth	r0, r3
 8002622:	88b9      	ldrh	r1, [r7, #4]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	4413      	add	r3, r2
 800262a:	b29a      	uxth	r2, r3
 800262c:	88bc      	ldrh	r4, [r7, #4]
 800262e:	883b      	ldrh	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4623      	mov	r3, r4
 8002634:	f7ff fe10 	bl	8002258 <ST7789_DrawLine>

	while (x < y) {
 8002638:	e079      	b.n	800272e <ST7789_DrawFilledCircle+0x1a0>
		if (f >= 0) {
 800263a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0e      	blt.n	8002660 <ST7789_DrawFilledCircle+0xd2>
			y--;
 8002642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800264e:	8a7b      	ldrh	r3, [r7, #18]
 8002650:	3302      	adds	r3, #2
 8002652:	b29b      	uxth	r3, r3
 8002654:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002656:	8afa      	ldrh	r2, [r7, #22]
 8002658:	8a7b      	ldrh	r3, [r7, #18]
 800265a:	4413      	add	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002660:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002664:	b29b      	uxth	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800266c:	8abb      	ldrh	r3, [r7, #20]
 800266e:	3302      	adds	r3, #2
 8002670:	b29b      	uxth	r3, r3
 8002672:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002674:	8afa      	ldrh	r2, [r7, #22]
 8002676:	8abb      	ldrh	r3, [r7, #20]
 8002678:	4413      	add	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	8a3b      	ldrh	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b298      	uxth	r0, r3
 8002686:	88ba      	ldrh	r2, [r7, #4]
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	4413      	add	r3, r2
 800268c:	b299      	uxth	r1, r3
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	8a3b      	ldrh	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	b29c      	uxth	r4, r3
 8002696:	88ba      	ldrh	r2, [r7, #4]
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	4413      	add	r3, r2
 800269c:	b29a      	uxth	r2, r3
 800269e:	883b      	ldrh	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	4622      	mov	r2, r4
 80026a6:	f7ff fdd7 	bl	8002258 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	8a3b      	ldrh	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	b298      	uxth	r0, r3
 80026b2:	88ba      	ldrh	r2, [r7, #4]
 80026b4:	89fb      	ldrh	r3, [r7, #14]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b299      	uxth	r1, r3
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	8a3b      	ldrh	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b29c      	uxth	r4, r3
 80026c2:	88ba      	ldrh	r2, [r7, #4]
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	883b      	ldrh	r3, [r7, #0]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	4622      	mov	r2, r4
 80026d2:	f7ff fdc1 	bl	8002258 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	89fb      	ldrh	r3, [r7, #14]
 80026da:	4413      	add	r3, r2
 80026dc:	b298      	uxth	r0, r3
 80026de:	88ba      	ldrh	r2, [r7, #4]
 80026e0:	8a3b      	ldrh	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	b299      	uxth	r1, r3
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	b29c      	uxth	r4, r3
 80026ee:	88ba      	ldrh	r2, [r7, #4]
 80026f0:	8a3b      	ldrh	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	883b      	ldrh	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	4622      	mov	r2, r4
 80026fe:	f7ff fdab 	bl	8002258 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	4413      	add	r3, r2
 8002708:	b298      	uxth	r0, r3
 800270a:	88ba      	ldrh	r2, [r7, #4]
 800270c:	8a3b      	ldrh	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	b299      	uxth	r1, r3
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	b29c      	uxth	r4, r3
 800271a:	88ba      	ldrh	r2, [r7, #4]
 800271c:	8a3b      	ldrh	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	b29a      	uxth	r2, r3
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	4622      	mov	r2, r4
 800272a:	f7ff fd95 	bl	8002258 <ST7789_DrawLine>
	while (x < y) {
 800272e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002736:	429a      	cmp	r2, r3
 8002738:	f6ff af7f 	blt.w	800263a <ST7789_DrawFilledCircle+0xac>
	}
	ST7789_UnSelect();
 800273c:	bf00      	nop
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}

08002746 <rainbow>:




uint16_t rainbow(uint16_t value)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	80fb      	strh	r3, [r7, #6]
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to 127 = red

	uint16_t red = 0; // Red is the top 5 bits of a 16 bit colour value
 8002750:	2300      	movs	r3, #0
 8002752:	81fb      	strh	r3, [r7, #14]
	uint16_t green = 0;// Green is the middle 6 bits
 8002754:	2300      	movs	r3, #0
 8002756:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = 0; // Blue is the bottom 5 bits
 8002758:	2300      	movs	r3, #0
 800275a:	817b      	strh	r3, [r7, #10]

	uint16_t quadrant = value / 32;
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	813b      	strh	r3, [r7, #8]

  if (quadrant == 0) {
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <rainbow+0x36>
    blue = 31;
 8002768:	231f      	movs	r3, #31
 800276a:	817b      	strh	r3, [r7, #10]
    green = 2 * (value % 32);
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	b29b      	uxth	r3, r3
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 1) {
 800277c:	893b      	ldrh	r3, [r7, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d109      	bne.n	8002796 <rainbow+0x50>
    blue = 31 - (value % 32);
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	43db      	mvns	r3, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	817b      	strh	r3, [r7, #10]
    green = 63;
 800278e:	233f      	movs	r3, #63	; 0x3f
 8002790:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 2) {
 8002796:	893b      	ldrh	r3, [r7, #8]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <rainbow+0x66>
    blue = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	817b      	strh	r3, [r7, #10]
    green = 63;
 80027a0:	233f      	movs	r3, #63	; 0x3f
 80027a2:	81bb      	strh	r3, [r7, #12]
    red = value % 32;
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 3) {
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d10c      	bne.n	80027cc <rainbow+0x86>
    blue = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	817b      	strh	r3, [r7, #10]
    green = 63 - 2 * (value % 32);
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	b29b      	uxth	r3, r3
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80027c6:	81bb      	strh	r3, [r7, #12]
    red = 31;
 80027c8:	231f      	movs	r3, #31
 80027ca:	81fb      	strh	r3, [r7, #14]
  }
  return (red << 11) + (green << 5) + blue;
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	02db      	lsls	r3, r3, #11
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	89bb      	ldrh	r3, [r7, #12]
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4413      	add	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	4413      	add	r3, r2
 80027e0:	b29b      	uxth	r3, r3
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <ILI9341_drawFastHLine>:

void ILI9341_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80027ee:	b590      	push	{r4, r7, lr}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af02      	add	r7, sp, #8
 80027f4:	4604      	mov	r4, r0
 80027f6:	4608      	mov	r0, r1
 80027f8:	4611      	mov	r1, r2
 80027fa:	461a      	mov	r2, r3
 80027fc:	4623      	mov	r3, r4
 80027fe:	80fb      	strh	r3, [r7, #6]
 8002800:	4603      	mov	r3, r0
 8002802:	80bb      	strh	r3, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	803b      	strh	r3, [r7, #0]
	ST7789_DrawLine(x, y, x+w-1, y, color);
 800280c:	88f8      	ldrh	r0, [r7, #6]
 800280e:	88b9      	ldrh	r1, [r7, #4]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	4413      	add	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	88bc      	ldrh	r4, [r7, #4]
 800281e:	883b      	ldrh	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	4623      	mov	r3, r4
 8002824:	f7ff fd18 	bl	8002258 <ST7789_DrawLine>
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}

08002830 <fillTriangle>:
	ST7789_DrawLine(x, y, x, y+h-1, color);
}


void fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b08f      	sub	sp, #60	; 0x3c
 8002834:	af00      	add	r7, sp, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4623      	mov	r3, r4
 8002840:	80fb      	strh	r3, [r7, #6]
 8002842:	4603      	mov	r3, r0
 8002844:	80bb      	strh	r3, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]
 800284a:	4613      	mov	r3, r2
 800284c:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
 800284e:	88ba      	ldrh	r2, [r7, #4]
 8002850:	883b      	ldrh	r3, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d90b      	bls.n	800286e <fillTriangle+0x3e>
    swap(y0, y1); swap(x0, x1);
 8002856:	88bb      	ldrh	r3, [r7, #4]
 8002858:	84fb      	strh	r3, [r7, #38]	; 0x26
 800285a:	883b      	ldrh	r3, [r7, #0]
 800285c:	80bb      	strh	r3, [r7, #4]
 800285e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002860:	803b      	strh	r3, [r7, #0]
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	80fb      	strh	r3, [r7, #6]
 800286a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800286c:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 800286e:	883a      	ldrh	r2, [r7, #0]
 8002870:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002874:	429a      	cmp	r2, r3
 8002876:	d90f      	bls.n	8002898 <fillTriangle+0x68>
    swap(y2, y1); swap(x2, x1);
 8002878:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800287c:	847b      	strh	r3, [r7, #34]	; 0x22
 800287e:	883b      	ldrh	r3, [r7, #0]
 8002880:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002886:	803b      	strh	r3, [r7, #0]
 8002888:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800288c:	843b      	strh	r3, [r7, #32]
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002894:	8c3b      	ldrh	r3, [r7, #32]
 8002896:	807b      	strh	r3, [r7, #2]
  }
  if (y0 > y1) {
 8002898:	88ba      	ldrh	r2, [r7, #4]
 800289a:	883b      	ldrh	r3, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d90b      	bls.n	80028b8 <fillTriangle+0x88>
    swap(y0, y1); swap(x0, x1);
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	83fb      	strh	r3, [r7, #30]
 80028a4:	883b      	ldrh	r3, [r7, #0]
 80028a6:	80bb      	strh	r3, [r7, #4]
 80028a8:	8bfb      	ldrh	r3, [r7, #30]
 80028aa:	803b      	strh	r3, [r7, #0]
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	83bb      	strh	r3, [r7, #28]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	80fb      	strh	r3, [r7, #6]
 80028b4:	8bbb      	ldrh	r3, [r7, #28]
 80028b6:	807b      	strh	r3, [r7, #2]
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80028b8:	88ba      	ldrh	r2, [r7, #4]
 80028ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d135      	bne.n	800292e <fillTriangle+0xfe>
    a = b = x0;
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80028c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80028c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    if(x1 < a)      a = x1;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80028d0:	429a      	cmp	r2, r3
 80028d2:	da02      	bge.n	80028da <fillTriangle+0xaa>
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028d8:	e006      	b.n	80028e8 <fillTriangle+0xb8>
    else if(x1 > b) b = x1;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dd01      	ble.n	80028e8 <fillTriangle+0xb8>
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(x2 < a)      a = x2;
 80028e8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80028f0:	429a      	cmp	r2, r3
 80028f2:	da03      	bge.n	80028fc <fillTriangle+0xcc>
 80028f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028fa:	e008      	b.n	800290e <fillTriangle+0xde>
    else if(x2 > b) b = x2;
 80028fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002900:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002904:	429a      	cmp	r2, r3
 8002906:	dd02      	ble.n	800290e <fillTriangle+0xde>
 8002908:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800290c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_drawFastHLine(a, y0, b-a+1, color);
 800290e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002912:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	b29b      	uxth	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	b21a      	sxth	r2, r3
 8002920:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002924:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002928:	f7ff ff61 	bl	80027ee <ILI9341_drawFastHLine>
    return;
 800292c:	e0d1      	b.n	8002ad2 <fillTriangle+0x2a2>
  }

  int16_t
    dx01 = x1 - x0,
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	b29b      	uxth	r3, r3
 8002936:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8002938:	883a      	ldrh	r2, [r7, #0]
 800293a:	88bb      	ldrh	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8002942:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	b29b      	uxth	r3, r3
 800294c:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800294e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	b29b      	uxth	r3, r3
 8002958:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800295a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8002966:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800296a:	883b      	ldrh	r3, [r7, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	823b      	strh	r3, [r7, #16]
  int32_t
    sa   = 0,
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
 800297a:	883a      	ldrh	r2, [r7, #0]
 800297c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002980:	429a      	cmp	r2, r3
 8002982:	d102      	bne.n	800298a <fillTriangle+0x15a>
 8002984:	883b      	ldrh	r3, [r7, #0]
 8002986:	863b      	strh	r3, [r7, #48]	; 0x30
 8002988:	e003      	b.n	8002992 <fillTriangle+0x162>
  else         last = y1-1; // Skip it
 800298a:	883b      	ldrh	r3, [r7, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	863b      	strh	r3, [r7, #48]	; 0x30

  for(y=y0; y<=last; y++) {
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	867b      	strh	r3, [r7, #50]	; 0x32
 8002996:	e03e      	b.n	8002a16 <fillTriangle+0x1e6>
    a   = x0 + sa / dy01;
 8002998:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299e:	fb92 f3f3 	sdiv	r3, r2, r3
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	4413      	add	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    b   = x0 + sb / dy02;
 80029ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	4413      	add	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx01;
 80029c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	4413      	add	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx02;
 80029ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d0:	4413      	add	r3, r2
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
 80029d4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80029d8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80029dc:	429a      	cmp	r2, r3
 80029de:	dd05      	ble.n	80029ec <fillTriangle+0x1bc>
 80029e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e2:	81bb      	strh	r3, [r7, #12]
 80029e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80029e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80029e8:	89bb      	ldrh	r3, [r7, #12]
 80029ea:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_drawFastHLine(a, y, b-a+1, color);
 80029ec:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029fe:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002a02:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002a06:	f7ff fef2 	bl	80027ee <ILI9341_drawFastHLine>
  for(y=y0; y<=last; y++) {
 8002a0a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a16:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002a1a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	ddba      	ble.n	8002998 <fillTriangle+0x168>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8002a22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a26:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002a2a:	883a      	ldrh	r2, [r7, #0]
 8002a2c:	1a8a      	subs	r2, r1, r2
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sb = dx02 * (y - y0);
 8002a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a38:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002a3c:	88ba      	ldrh	r2, [r7, #4]
 8002a3e:	1a8a      	subs	r2, r1, r2
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
  for(; y<=y2; y++) {
 8002a46:	e03e      	b.n	8002ac6 <fillTriangle+0x296>
    a   = x1 + sa / dy12;
 8002a48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	86fb      	strh	r3, [r7, #54]	; 0x36
    b   = x0 + sb / dy02;
 8002a5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a62:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx12;
 8002a70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a76:	4413      	add	r3, r2
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx02;
 8002a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a80:	4413      	add	r3, r2
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
 8002a84:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002a88:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dd05      	ble.n	8002a9c <fillTriangle+0x26c>
 8002a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a92:	81fb      	strh	r3, [r7, #14]
 8002a94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a96:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_drawFastHLine(a, y, b-a+1, color);
 8002a9c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002aae:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002ab2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002ab6:	f7ff fe9a 	bl	80027ee <ILI9341_drawFastHLine>
  for(; y<=y2; y++) {
 8002aba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ac6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002aca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	ddba      	ble.n	8002a48 <fillTriangle+0x218>
  }
}
 8002ad2:	373c      	adds	r7, #60	; 0x3c
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}

08002ad8 <ringMeter>:




int ringMeter(int value, int vmin, int vmax, int x, int y, int r,int w, uint16_t scheme){
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b099      	sub	sp, #100	; 0x64
 8002adc:	af04      	add	r7, sp, #16
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	4413      	add	r3, r2
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	4413      	add	r3, r2
 8002af4:	66bb      	str	r3, [r7, #104]	; 0x68
//  int w = r / 8;    // Width of outer ring is 1/4 of radius
  int angle = 150;  // Half the sweep angle of meter (300 degrees)
 8002af6:	2396      	movs	r3, #150	; 0x96
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	425a      	negs	r2, r3
 8002afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff f9a6 	bl	8001e5a <map>
 8002b0e:	6438      	str	r0, [r7, #64]	; 0x40
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 8002b10:	2305      	movs	r3, #5
 8002b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8002b14:	2305      	movs	r3, #5
 8002b16:	87bb      	strh	r3, [r7, #60]	; 0x3c

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b1e:	e1d7      	b.n	8002ed0 <ringMeter+0x3f8>
    // Choose colour from scheme
    int colour = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (scheme) {
 8002b24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d857      	bhi.n	8002bdc <ringMeter+0x104>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <ringMeter+0x5c>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b61 	.word	0x08002b61
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b6f 	.word	0x08002b6f
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002bb3 	.word	0x08002bb3
 8002b4c:	08002bdd 	.word	0x08002bdd
 8002b50:	08002bdd 	.word	0x08002bdd
 8002b54:	08002bd5 	.word	0x08002bd5
      case 0: colour = RED; break; // Fixed colour
 8002b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5e:	e040      	b.n	8002be2 <ringMeter+0x10a>
      case 1: colour = GREEN; break; // Fixed colour
 8002b60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b66:	e03c      	b.n	8002be2 <ringMeter+0x10a>
      case 2: colour = BLUE; break; // Fixed colour
 8002b68:	231f      	movs	r3, #31
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6c:	e039      	b.n	8002be2 <ringMeter+0x10a>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 8002b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b70:	4259      	negs	r1, r3
 8002b72:	237f      	movs	r3, #127	; 0x7f
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b7c:	f7ff f96d 	bl	8001e5a <map>
 8002b80:	4603      	mov	r3, r0
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fdde 	bl	8002746 <rainbow>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b8e:	e028      	b.n	8002be2 <ringMeter+0x10a>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	4259      	negs	r1, r3
 8002b94:	237f      	movs	r3, #127	; 0x7f
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	233f      	movs	r3, #63	; 0x3f
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b9e:	f7ff f95c 	bl	8001e5a <map>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fdcd 	bl	8002746 <rainbow>
 8002bac:	4603      	mov	r3, r0
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb0:	e017      	b.n	8002be2 <ringMeter+0x10a>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb4:	4259      	negs	r1, r3
 8002bb6:	233f      	movs	r3, #63	; 0x3f
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	237f      	movs	r3, #127	; 0x7f
 8002bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bc0:	f7ff f94b 	bl	8001e5a <map>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fdbc 	bl	8002746 <rainbow>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd2:	e006      	b.n	8002be2 <ringMeter+0x10a>
      case 8: colour = YELLOW; break;
 8002bd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bda:	e002      	b.n	8002be2 <ringMeter+0x10a>
      default: colour = BLUE; break; // Fixed colour
 8002bdc:	231f      	movs	r3, #31
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be0:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	3b5a      	subs	r3, #90	; 0x5a
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fdc6 	bl	8000778 <__aeabi_i2d>
 8002bec:	a3be      	add	r3, pc, #760	; (adr r3, 8002ee8 <ringMeter+0x410>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fb45 	bl	8000280 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ec43 2b17 	vmov	d7, r2, r3
 8002bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002c02:	eef0 0a67 	vmov.f32	s1, s15
 8002c06:	f002 fb03 	bl	8005210 <cos>
 8002c0a:	ec53 2b10 	vmov	r2, r3, d0
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd fecb 	bl	80009ac <__aeabi_d2f>
 8002c16:	4603      	mov	r3, r0
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
    float sy = sin((i - 90) * 0.0174532925);
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	3b5a      	subs	r3, #90	; 0x5a
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fdaa 	bl	8000778 <__aeabi_i2d>
 8002c24:	a3b0      	add	r3, pc, #704	; (adr r3, 8002ee8 <ringMeter+0x410>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd fb29 	bl	8000280 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	ec43 2b17 	vmov	d7, r2, r3
 8002c36:	eeb0 0a47 	vmov.f32	s0, s14
 8002c3a:	eef0 0a67 	vmov.f32	s1, s15
 8002c3e:	f002 fb3b 	bl	80052b8 <sin>
 8002c42:	ec53 2b10 	vmov	r2, r3, d0
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd feaf 	bl	80009ac <__aeabi_d2f>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t x0 = sx * (r - w) + x;
 8002c52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c60:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7a:	ee17 3a90 	vmov	r3, s15
 8002c7e:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t y0 = sy * (r - w) + y;
 8002c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca8:	ee17 3a90 	vmov	r3, s15
 8002cac:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t x1 = sx * r + x;
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd2:	ee17 3a90 	vmov	r3, s15
 8002cd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y1 = sy * r + y;
 8002cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cfc:	ee17 3a90 	vmov	r3, s15
 8002d00:	85bb      	strh	r3, [r7, #44]	; 0x2c

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 8002d02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	4413      	add	r3, r2
 8002d08:	3b5a      	subs	r3, #90	; 0x5a
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fd34 	bl	8000778 <__aeabi_i2d>
 8002d10:	a375      	add	r3, pc, #468	; (adr r3, 8002ee8 <ringMeter+0x410>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fab3 	bl	8000280 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	ec43 2b17 	vmov	d7, r2, r3
 8002d22:	eeb0 0a47 	vmov.f32	s0, s14
 8002d26:	eef0 0a67 	vmov.f32	s1, s15
 8002d2a:	f002 fa71 	bl	8005210 <cos>
 8002d2e:	ec53 2b10 	vmov	r2, r3, d0
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fe39 	bl	80009ac <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 8002d3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	4413      	add	r3, r2
 8002d44:	3b5a      	subs	r3, #90	; 0x5a
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fd16 	bl	8000778 <__aeabi_i2d>
 8002d4c:	a366      	add	r3, pc, #408	; (adr r3, 8002ee8 <ringMeter+0x410>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fa95 	bl	8000280 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ec43 2b17 	vmov	d7, r2, r3
 8002d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d62:	eef0 0a67 	vmov.f32	s1, s15
 8002d66:	f002 faa7 	bl	80052b8 <sin>
 8002d6a:	ec53 2b10 	vmov	r2, r3, d0
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd fe1b 	bl	80009ac <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    int x2 = sx2 * (r - w) + x;
 8002d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da2:	ee17 3a90 	vmov	r3, s15
 8002da6:	623b      	str	r3, [r7, #32]
    int y2 = sy2 * (r - w) + y;
 8002da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd0:	ee17 3a90 	vmov	r3, s15
 8002dd4:	61fb      	str	r3, [r7, #28]
    int x3 = sx2 * r + x;
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	61bb      	str	r3, [r7, #24]
    int y3 = sy2 * r + y;
 8002e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e24:	ee17 3a90 	vmov	r3, s15
 8002e28:	617b      	str	r3, [r7, #20]

    if (i < v) { // Fill in coloured segments with 2 triangles
 8002e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	da26      	bge.n	8002e80 <ringMeter+0x3a8>
//      my_lcd.Set_Draw_color(colour);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);
//      text_colour = colour; // Save the last colour drawn

    	fillTriangle(x0, y0, x1, y1, x2, y2, colour);
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e3c:	b289      	uxth	r1, r1
 8002e3e:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 8002e40:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 8002e42:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8002e44:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8002e46:	9102      	str	r1, [sp, #8]
 8002e48:	9201      	str	r2, [sp, #4]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4633      	mov	r3, r6
 8002e4e:	462a      	mov	r2, r5
 8002e50:	4621      	mov	r1, r4
 8002e52:	f7ff fced 	bl	8002830 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, colour);
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	b29d      	uxth	r5, r3
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	b29e      	uxth	r6, r3
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	b292      	uxth	r2, r2
 8002e66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e68:	b289      	uxth	r1, r1
 8002e6a:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 8002e6c:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8002e6e:	9102      	str	r1, [sp, #8]
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4633      	mov	r3, r6
 8002e76:	462a      	mov	r2, r5
 8002e78:	4621      	mov	r1, r4
 8002e7a:	f7ff fcd9 	bl	8002830 <fillTriangle>
 8002e7e:	e023      	b.n	8002ec8 <ringMeter+0x3f0>
    {
//      my_lcd.Set_Draw_color(GRAY);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);

    	fillTriangle(x0, y0, x1, y1, x2, y2, GRAY);
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	b292      	uxth	r2, r2
 8002e88:	8dbd      	ldrh	r5, [r7, #44]	; 0x2c
 8002e8a:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8002e8c:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002e8e:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8002e90:	f248 4630 	movw	r6, #33840	; 0x8430
 8002e94:	9602      	str	r6, [sp, #8]
 8002e96:	9201      	str	r2, [sp, #4]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	f7ff fcc7 	bl	8002830 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, GRAY);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	b29c      	uxth	r4, r3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	b29d      	uxth	r5, r3
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002eb4:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8002eb6:	f248 4630 	movw	r6, #33840	; 0x8430
 8002eba:	9602      	str	r6, [sp, #8]
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	f7ff fcb4 	bl	8002830 <fillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 8002ec8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ecc:	4413      	add	r3, r2
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f6ff ae23 	blt.w	8002b20 <ringMeter+0x48>
    }


  }

  return x + r;
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	4413      	add	r3, r2
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3754      	adds	r7, #84	; 0x54
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee8:	a1fae711 	.word	0xa1fae711
 8002eec:	3f91df46 	.word	0x3f91df46

08002ef0 <ringMeter1>:

int ringMeter1(int value, int vmin, int vmax, int x, int y, int r,int w,uint16_t bcolor, uint16_t scheme){
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	b099      	sub	sp, #100	; 0x64
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	4413      	add	r3, r2
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	4413      	add	r3, r2
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
//  int w = r / 8;    // Width of outer ring is 1/4 of radius
  int angle = 150;  // Half the sweep angle of meter (300 degrees)
 8002f0e:	2396      	movs	r3, #150	; 0x96
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 8002f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f14:	425a      	negs	r2, r3
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7fe ff9a 	bl	8001e5a <map>
 8002f26:	6438      	str	r0, [r7, #64]	; 0x40
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 8002f28:	2305      	movs	r3, #5
 8002f2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8002f2c:	2305      	movs	r3, #5
 8002f2e:	87bb      	strh	r3, [r7, #60]	; 0x3c

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	425b      	negs	r3, r3
 8002f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f36:	e1da      	b.n	80032ee <ringMeter1+0x3fe>
    // Choose colour from scheme
    int colour = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (scheme) {
 8002f3c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	d858      	bhi.n	8002ff6 <ringMeter1+0x106>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <ringMeter1+0x5c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f6d 	.word	0x08002f6d
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f83 	.word	0x08002f83
 8002f5c:	08002fa5 	.word	0x08002fa5
 8002f60:	08002fc7 	.word	0x08002fc7
 8002f64:	08002fe9 	.word	0x08002fe9
 8002f68:	08002fef 	.word	0x08002fef
      case 0: colour = RED; break; // Fixed colour
 8002f6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f72:	e043      	b.n	8002ffc <ringMeter1+0x10c>
      case 1: colour = GREEN; break; // Fixed colour
 8002f74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f7a:	e03f      	b.n	8002ffc <ringMeter1+0x10c>
      case 2: colour = BLUE; break; // Fixed colour
 8002f7c:	231f      	movs	r3, #31
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f80:	e03c      	b.n	8002ffc <ringMeter1+0x10c>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 8002f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f84:	4259      	negs	r1, r3
 8002f86:	237f      	movs	r3, #127	; 0x7f
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f90:	f7fe ff63 	bl	8001e5a <map>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fbd4 	bl	8002746 <rainbow>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa2:	e02b      	b.n	8002ffc <ringMeter1+0x10c>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	4259      	negs	r1, r3
 8002fa8:	237f      	movs	r3, #127	; 0x7f
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	233f      	movs	r3, #63	; 0x3f
 8002fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fb2:	f7fe ff52 	bl	8001e5a <map>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fbc3 	bl	8002746 <rainbow>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc4:	e01a      	b.n	8002ffc <ringMeter1+0x10c>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc8:	4259      	negs	r1, r3
 8002fca:	233f      	movs	r3, #63	; 0x3f
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	237f      	movs	r3, #127	; 0x7f
 8002fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fd4:	f7fe ff41 	bl	8001e5a <map>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fbb2 	bl	8002746 <rainbow>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe6:	e009      	b.n	8002ffc <ringMeter1+0x10c>
      case 6: colour = BLACK; break;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fec:	e006      	b.n	8002ffc <ringMeter1+0x10c>
      case 7: colour = Aqua; break;
 8002fee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff4:	e002      	b.n	8002ffc <ringMeter1+0x10c>
      default: colour = BLUE; break; // Fixed colour
 8002ff6:	231f      	movs	r3, #31
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffa:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 8002ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffe:	3b5a      	subs	r3, #90	; 0x5a
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fbb9 	bl	8000778 <__aeabi_i2d>
 8003006:	a3c0      	add	r3, pc, #768	; (adr r3, 8003308 <ringMeter1+0x418>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f7fd f938 	bl	8000280 <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	ec43 2b17 	vmov	d7, r2, r3
 8003018:	eeb0 0a47 	vmov.f32	s0, s14
 800301c:	eef0 0a67 	vmov.f32	s1, s15
 8003020:	f002 f8f6 	bl	8005210 <cos>
 8003024:	ec53 2b10 	vmov	r2, r3, d0
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fcbe 	bl	80009ac <__aeabi_d2f>
 8003030:	4603      	mov	r3, r0
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
    float sy = sin((i - 90) * 0.0174532925);
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	3b5a      	subs	r3, #90	; 0x5a
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fb9d 	bl	8000778 <__aeabi_i2d>
 800303e:	a3b2      	add	r3, pc, #712	; (adr r3, 8003308 <ringMeter1+0x418>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f7fd f91c 	bl	8000280 <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	ec43 2b17 	vmov	d7, r2, r3
 8003050:	eeb0 0a47 	vmov.f32	s0, s14
 8003054:	eef0 0a67 	vmov.f32	s1, s15
 8003058:	f002 f92e 	bl	80052b8 <sin>
 800305c:	ec53 2b10 	vmov	r2, r3, d0
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fca2 	bl	80009ac <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t x0 = sx * (r - w) + x;
 800306c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800306e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800307a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800307e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003094:	ee17 3a90 	vmov	r3, s15
 8003098:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t y0 = sy * (r - w) + y;
 800309a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800309c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c2:	ee17 3a90 	vmov	r3, s15
 80030c6:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t x1 = sx * r + x;
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80030d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ec:	ee17 3a90 	vmov	r3, s15
 80030f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y1 = sy * r + y;
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003116:	ee17 3a90 	vmov	r3, s15
 800311a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 800311c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800311e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003120:	4413      	add	r3, r2
 8003122:	3b5a      	subs	r3, #90	; 0x5a
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fb27 	bl	8000778 <__aeabi_i2d>
 800312a:	a377      	add	r3, pc, #476	; (adr r3, 8003308 <ringMeter1+0x418>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd f8a6 	bl	8000280 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	ec43 2b17 	vmov	d7, r2, r3
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	eef0 0a67 	vmov.f32	s1, s15
 8003144:	f002 f864 	bl	8005210 <cos>
 8003148:	ec53 2b10 	vmov	r2, r3, d0
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fc2c 	bl	80009ac <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 8003158:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	4413      	add	r3, r2
 800315e:	3b5a      	subs	r3, #90	; 0x5a
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fb09 	bl	8000778 <__aeabi_i2d>
 8003166:	a368      	add	r3, pc, #416	; (adr r3, 8003308 <ringMeter1+0x418>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd f888 	bl	8000280 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	ec43 2b17 	vmov	d7, r2, r3
 8003178:	eeb0 0a47 	vmov.f32	s0, s14
 800317c:	eef0 0a67 	vmov.f32	s1, s15
 8003180:	f002 f89a 	bl	80052b8 <sin>
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fc0e 	bl	80009ac <__aeabi_d2f>
 8003190:	4603      	mov	r3, r0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    int x2 = sx2 * (r - w) + x;
 8003194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	623b      	str	r3, [r7, #32]
    int y2 = sy2 * (r - w) + y;
 80031c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ea:	ee17 3a90 	vmov	r3, s15
 80031ee:	61fb      	str	r3, [r7, #28]
    int x3 = sx2 * r + x;
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003214:	ee17 3a90 	vmov	r3, s15
 8003218:	61bb      	str	r3, [r7, #24]
    int y3 = sy2 * r + y;
 800321a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003224:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323e:	ee17 3a90 	vmov	r3, s15
 8003242:	617b      	str	r3, [r7, #20]

    if (i < v) { // Fill in coloured segments with 2 triangles
 8003244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003248:	429a      	cmp	r2, r3
 800324a:	da26      	bge.n	800329a <ringMeter1+0x3aa>
//      my_lcd.Set_Draw_color(colour);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);
//      text_colour = colour; // Save the last colour drawn

    	fillTriangle(x0, y0, x1, y1, x2, y2, colour);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	b29b      	uxth	r3, r3
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	b292      	uxth	r2, r2
 8003254:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003256:	b289      	uxth	r1, r1
 8003258:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 800325a:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 800325c:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800325e:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8003260:	9102      	str	r1, [sp, #8]
 8003262:	9201      	str	r2, [sp, #4]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4633      	mov	r3, r6
 8003268:	462a      	mov	r2, r5
 800326a:	4621      	mov	r1, r4
 800326c:	f7ff fae0 	bl	8002830 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, colour);
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	b29d      	uxth	r5, r3
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	b29e      	uxth	r6, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	b29b      	uxth	r3, r3
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	b292      	uxth	r2, r2
 8003280:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003282:	b289      	uxth	r1, r1
 8003284:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 8003286:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8003288:	9102      	str	r1, [sp, #8]
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4633      	mov	r3, r6
 8003290:	462a      	mov	r2, r5
 8003292:	4621      	mov	r1, r4
 8003294:	f7ff facc 	bl	8002830 <fillTriangle>
 8003298:	e025      	b.n	80032e6 <ringMeter1+0x3f6>
    {
//      my_lcd.Set_Draw_color(GRAY);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);

    	fillTriangle(x0, y0, x1, y1, x2, y2, bcolor);
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	b29b      	uxth	r3, r3
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	b292      	uxth	r2, r2
 80032a2:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 80032a4:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80032a6:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 80032a8:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 80032aa:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80032ae:	9102      	str	r1, [sp, #8]
 80032b0:	9201      	str	r2, [sp, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4633      	mov	r3, r6
 80032b6:	462a      	mov	r2, r5
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7ff fab9 	bl	8002830 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, bcolor);
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	b29d      	uxth	r5, r3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	b29e      	uxth	r6, r3
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	b292      	uxth	r2, r2
 80032ce:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 80032d0:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80032d2:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80032d6:	9102      	str	r1, [sp, #8]
 80032d8:	9201      	str	r2, [sp, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4633      	mov	r3, r6
 80032de:	462a      	mov	r2, r5
 80032e0:	4621      	mov	r1, r4
 80032e2:	f7ff faa5 	bl	8002830 <fillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 80032e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ea:	4413      	add	r3, r2
 80032ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f6ff ae20 	blt.w	8002f38 <ringMeter1+0x48>
    }


  }

  return x + r;
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fc:	4413      	add	r3, r2
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3754      	adds	r7, #84	; 0x54
 8003302:	46bd      	mov	sp, r7
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003306:	bf00      	nop
 8003308:	a1fae711 	.word	0xa1fae711
 800330c:	3f91df46 	.word	0x3f91df46

08003310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_MspInit+0x4c>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_MspInit+0x4c>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_MspInit+0x4c>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_MspInit+0x4c>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_MspInit+0x4c>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_MspInit+0x4c>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_SPI_MspInit+0x84>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12b      	bne.n	80033da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 800338c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_SPI_MspInit+0x88>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80033ba:	23a0      	movs	r3, #160	; 0xa0
 80033bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ca:	2305      	movs	r3, #5
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	; (80033ec <HAL_SPI_MspInit+0x8c>)
 80033d6:	f000 fa23 	bl	8003820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40013000 	.word	0x40013000
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020000 	.word	0x40020000

080033f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <NMI_Handler+0x4>

080033f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <HardFault_Handler+0x4>

080033fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <MemManage_Handler+0x4>

08003402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003406:	e7fe      	b.n	8003406 <BusFault_Handler+0x4>

08003408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800340c:	e7fe      	b.n	800340c <UsageFault_Handler+0x4>

0800340e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800343c:	f000 f8c6 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f001 fa4e 	bl	8004914 <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20018000 	.word	0x20018000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	20005b00 	.word	0x20005b00
 80034ac:	20005c50 	.word	0x20005c50

080034b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <SystemInit+0x20>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <SystemInit+0x20>)
 80034bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e0:	e002      	b.n	80034e8 <LoopCopyDataInit>

080034e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e6:	3304      	adds	r3, #4

080034e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ec:	d3f9      	bcc.n	80034e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f0:	4c0b      	ldr	r4, [pc, #44]	; (8003520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f4:	e001      	b.n	80034fa <LoopFillZerobss>

080034f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f8:	3204      	adds	r2, #4

080034fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034fc:	d3fb      	bcc.n	80034f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034fe:	f7ff ffd7 	bl	80034b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003502:	f001 fa0d 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7fd fc1f 	bl	8000d48 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800350c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003518:	08006da0 	.word	0x08006da0
  ldr r2, =_sbss
 800351c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003520:	20005c50 	.word	0x20005c50

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 f931 	bl	80037b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	200f      	movs	r0, #15
 8003558:	f000 f808 	bl	800356c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff fed8 	bl	8003310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_InitTick+0x54>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x58>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003582:	fbb3 f3f1 	udiv	r3, r3, r1
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f93b 	bl	8003806 <HAL_SYSTICK_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80a      	bhi.n	80035b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a0:	2200      	movs	r2, #0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f000 f911 	bl	80037ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_InitTick+0x5c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000018 	.word	0x20000018
 80035c4:	20000020 	.word	0x20000020
 80035c8:	2000001c 	.word	0x2000001c

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000020 	.word	0x20000020
 80035f0:	20005b04 	.word	0x20005b04

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20005b04 	.word	0x20005b04

0800360c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff ffee 	bl	80035f4 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d005      	beq.n	8003632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_Delay+0x44>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003632:	bf00      	nop
 8003634:	f7ff ffde 	bl	80035f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d8f7      	bhi.n	8003634 <HAL_Delay+0x28>
  {
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000020 	.word	0x20000020

08003654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800367c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__NVIC_GetPriorityGrouping+0x18>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 0307 	and.w	r3, r3, #7
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003784:	d301      	bcc.n	800378a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003786:	2301      	movs	r3, #1
 8003788:	e00f      	b.n	80037aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <SysTick_Config+0x40>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003792:	210f      	movs	r1, #15
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f7ff ff8e 	bl	80036b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <SysTick_Config+0x40>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <SysTick_Config+0x40>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000e010 	.word	0xe000e010

080037b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff47 	bl	8003654 <__NVIC_SetPriorityGrouping>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037e0:	f7ff ff5c 	bl	800369c <__NVIC_GetPriorityGrouping>
 80037e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff ff8e 	bl	800370c <NVIC_EncodePriority>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff5d 	bl	80036b8 <__NVIC_SetPriority>
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ffb0 	bl	8003774 <SysTick_Config>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e159      	b.n	8003af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 8148 	bne.w	8003aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d005      	beq.n	8003872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	2b02      	cmp	r3, #2
 8003870:	d130      	bne.n	80038d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0201 	and.w	r2, r3, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d017      	beq.n	8003910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d123      	bne.n	8003964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	08da      	lsrs	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a2 	beq.w	8003aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c2:	4a52      	ldr	r2, [pc, #328]	; (8003b0c <HAL_GPIO_Init+0x2ec>)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x2f0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x202>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_GPIO_Init+0x2f4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x1fe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_GPIO_Init+0x2f8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x1fa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a46      	ldr	r2, [pc, #280]	; (8003b1c <HAL_GPIO_Init+0x2fc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x1f6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a45      	ldr	r2, [pc, #276]	; (8003b20 <HAL_GPIO_Init+0x300>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x1f2>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a12:	2307      	movs	r3, #7
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4935      	ldr	r1, [pc, #212]	; (8003b0c <HAL_GPIO_Init+0x2ec>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac0:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f aea2 	bls.w	800383c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e267      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d075      	beq.n	8003c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d112      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b82      	ldr	r3, [pc, #520]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	4b7e      	ldr	r3, [pc, #504]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d157      	bne.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e242      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x74>
 8003bc2:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a75      	ldr	r2, [pc, #468]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b70      	ldr	r3, [pc, #448]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6f      	ldr	r2, [pc, #444]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6c      	ldr	r2, [pc, #432]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bf4:	4b69      	ldr	r3, [pc, #420]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a68      	ldr	r2, [pc, #416]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a65      	ldr	r2, [pc, #404]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7ff fcee 	bl	80035f4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7ff fcea 	bl	80035f4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e207      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7ff fcda 	bl	80035f4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7ff fcd6 	bl	80035f4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1f3      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b51      	ldr	r3, [pc, #324]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c7      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4937      	ldr	r1, [pc, #220]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7ff fc8f 	bl	80035f4 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cda:	f7ff fc8b 	bl	80035f4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a8      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4925      	ldr	r1, [pc, #148]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff fc6e 	bl	80035f4 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7ff fc6a 	bl	80035f4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e187      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d036      	beq.n	8003db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <HAL_RCC_OscConfig+0x248>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7ff fc4e 	bl	80035f4 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7ff fc4a 	bl	80035f4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e167      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x200>
 8003d7a:	e01b      	b.n	8003db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_OscConfig+0x248>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7ff fc37 	bl	80035f4 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e00e      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7ff fc33 	bl	80035f4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d907      	bls.n	8003da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e150      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470000 	.word	0x42470000
 8003da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ea      	bne.n	8003d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8097 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc6:	4b81      	ldr	r3, [pc, #516]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	4b7d      	ldr	r3, [pc, #500]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a7c      	ldr	r2, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b7a      	ldr	r3, [pc, #488]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b77      	ldr	r3, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfe:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a73      	ldr	r2, [pc, #460]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0a:	f7ff fbf3 	bl	80035f4 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7ff fbef 	bl	80035f4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e10c      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2ea>
 8003e38:	4b64      	ldr	r3, [pc, #400]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a63      	ldr	r2, [pc, #396]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e01c      	b.n	8003e80 <HAL_RCC_OscConfig+0x324>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x30c>
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a5e      	ldr	r2, [pc, #376]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x324>
 8003e68:	4b58      	ldr	r3, [pc, #352]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	4b55      	ldr	r3, [pc, #340]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a54      	ldr	r2, [pc, #336]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f023 0304 	bic.w	r3, r3, #4
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7ff fbb4 	bl	80035f4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7ff fbb0 	bl	80035f4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0cb      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ee      	beq.n	8003e90 <HAL_RCC_OscConfig+0x334>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb4:	f7ff fb9e 	bl	80035f4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7ff fb9a 	bl	80035f4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0b5      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ee      	bne.n	8003ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	4a38      	ldr	r2, [pc, #224]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a1 	beq.w	800403c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003efa:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d05c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d141      	bne.n	8003f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7ff fb6e 	bl	80035f4 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7ff fb6a 	bl	80035f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e087      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7ff fb43 	bl	80035f4 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f72:	f7ff fb3f 	bl	80035f4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e05c      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x416>
 8003f90:	e054      	b.n	800403c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7ff fb2c 	bl	80035f4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7ff fb28 	bl	80035f4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e045      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x444>
 8003fbe:	e03d      	b.n	800403c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e038      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d028      	beq.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d121      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d11a      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	4293      	cmp	r3, r2
 8004012:	d111      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0cc      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d90c      	bls.n	8004088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	494d      	ldr	r1, [pc, #308]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d044      	beq.n	800416c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d119      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d003      	beq.n	800410a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004106:	2b03      	cmp	r3, #3
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e067      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4934      	ldr	r1, [pc, #208]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800413c:	f7ff fa5a 	bl	80035f4 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7ff fa56 	bl	80035f4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e04f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 020c 	and.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d1eb      	bne.n	8004144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d20c      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e032      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4916      	ldr	r1, [pc, #88]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d2:	f000 f821 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490a      	ldr	r1, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f9ba 	bl	800356c <HAL_InitTick>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00
 8004208:	40023800 	.word	0x40023800
 800420c:	08006b70 	.word	0x08006b70
 8004210:	20000018 	.word	0x20000018
 8004214:	2000001c 	.word	0x2000001c

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800421c:	b090      	sub	sp, #64	; 0x40
 800421e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
 8004224:	2300      	movs	r3, #0
 8004226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004228:	2300      	movs	r3, #0
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d00d      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x40>
 800423c:	2b08      	cmp	r3, #8
 800423e:	f200 80a1 	bhi.w	8004384 <HAL_RCC_GetSysClockFreq+0x16c>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x34>
 8004246:	2b04      	cmp	r3, #4
 8004248:	d003      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0x3a>
 800424a:	e09b      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_GetSysClockFreq+0x184>)
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004250:	e09b      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004252:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004256:	e098      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004262:	4b4d      	ldr	r3, [pc, #308]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d028      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	2200      	movs	r2, #0
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	627a      	str	r2, [r7, #36]	; 0x24
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004280:	2100      	movs	r1, #0
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004284:	fb03 f201 	mul.w	r2, r3, r1
 8004288:	2300      	movs	r3, #0
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	4413      	add	r3, r2
 8004290:	4a43      	ldr	r2, [pc, #268]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004292:	fba0 1202 	umull	r1, r2, r0, r2
 8004296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004298:	460a      	mov	r2, r1
 800429a:	62ba      	str	r2, [r7, #40]	; 0x28
 800429c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429e:	4413      	add	r3, r2
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	2200      	movs	r2, #0
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	61fa      	str	r2, [r7, #28]
 80042aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042b2:	f7fc fbcb 	bl	8000a4c <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042be:	e053      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c0:	4b35      	ldr	r3, [pc, #212]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	2200      	movs	r2, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	617a      	str	r2, [r7, #20]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042d2:	f04f 0b00 	mov.w	fp, #0
 80042d6:	4652      	mov	r2, sl
 80042d8:	465b      	mov	r3, fp
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	0159      	lsls	r1, r3, #5
 80042e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e8:	0150      	lsls	r0, r2, #5
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	ebb2 080a 	subs.w	r8, r2, sl
 80042f2:	eb63 090b 	sbc.w	r9, r3, fp
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004302:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004306:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800430a:	ebb2 0408 	subs.w	r4, r2, r8
 800430e:	eb63 0509 	sbc.w	r5, r3, r9
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	00eb      	lsls	r3, r5, #3
 800431c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004320:	00e2      	lsls	r2, r4, #3
 8004322:	4614      	mov	r4, r2
 8004324:	461d      	mov	r5, r3
 8004326:	eb14 030a 	adds.w	r3, r4, sl
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	eb45 030b 	adc.w	r3, r5, fp
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433e:	4629      	mov	r1, r5
 8004340:	028b      	lsls	r3, r1, #10
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004348:	4621      	mov	r1, r4
 800434a:	028a      	lsls	r2, r1, #10
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	2200      	movs	r2, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	60fa      	str	r2, [r7, #12]
 8004358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800435c:	f7fc fb76 	bl	8000a4c <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_GetSysClockFreq+0x180>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	3301      	adds	r3, #1
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004382:	e002      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetSysClockFreq+0x184>)
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800438c:	4618      	mov	r0, r3
 800438e:	3740      	adds	r7, #64	; 0x40
 8004390:	46bd      	mov	sp, r7
 8004392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	017d7840 	.word	0x017d7840

080043a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07b      	b.n	80044ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c6:	d009      	beq.n	80043dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
 80043ce:	e005      	b.n	80043dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe ffb2 	bl	8003360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	ea42 0103 	orr.w	r1, r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0104 	and.w	r1, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0210 	and.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b088      	sub	sp, #32
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_SPI_Transmit+0x22>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e126      	b.n	8004726 <HAL_SPI_Transmit+0x270>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e0:	f7ff f888 	bl	80035f4 <HAL_GetTick>
 80044e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044fa:	e10b      	b.n	8004714 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_SPI_Transmit+0x52>
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800450c:	e102      	b.n	8004714 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	d10f      	bne.n	8004576 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d007      	beq.n	8004594 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d14b      	bne.n	8004636 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Transmit+0xf6>
 80045a6:	8afb      	ldrh	r3, [r7, #22]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d13e      	bne.n	800462a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045d0:	e02b      	b.n	800462a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d112      	bne.n	8004606 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
 8004604:	e011      	b.n	800462a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004606:	f7fe fff5 	bl	80035f4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d803      	bhi.n	800461e <HAL_SPI_Transmit+0x168>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d102      	bne.n	8004624 <HAL_SPI_Transmit+0x16e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004628:	e074      	b.n	8004714 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ce      	bne.n	80045d2 <HAL_SPI_Transmit+0x11c>
 8004634:	e04c      	b.n	80046d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_SPI_Transmit+0x18e>
 800463e:	8afb      	ldrh	r3, [r7, #22]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d140      	bne.n	80046c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800466a:	e02c      	b.n	80046c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d113      	bne.n	80046a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	86da      	strh	r2, [r3, #54]	; 0x36
 80046a0:	e011      	b.n	80046c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fe ffa7 	bl	80035f4 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Transmit+0x204>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Transmit+0x20a>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046c4:	e026      	b.n	8004714 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1cd      	bne.n	800466c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f8b3 	bl	8004840 <SPI_EndRxTxTransaction>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e000      	b.n	8004714 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004724:	7ffb      	ldrb	r3, [r7, #31]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004740:	f7fe ff58 	bl	80035f4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	4413      	add	r3, r2
 800474e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004750:	f7fe ff50 	bl	80035f4 <HAL_GetTick>
 8004754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	015b      	lsls	r3, r3, #5
 800475c:	0d1b      	lsrs	r3, r3, #20
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	fb02 f303 	mul.w	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004766:	e054      	b.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d050      	beq.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004770:	f7fe ff40 	bl	80035f4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	429a      	cmp	r2, r3
 800477e:	d902      	bls.n	8004786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d13d      	bne.n	8004802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d111      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	d004      	beq.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d107      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d10f      	bne.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e017      	b.n	8004832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3b01      	subs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	429a      	cmp	r2, r3
 800482e:	d19b      	bne.n	8004768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000018 	.word	0x20000018

08004840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <SPI_EndRxTxTransaction+0x7c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <SPI_EndRxTxTransaction+0x80>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0d5b      	lsrs	r3, r3, #21
 8004858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d112      	bne.n	8004892 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff5a 	bl	8004730 <SPI_WaitFlagStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e00f      	b.n	80048b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3b01      	subs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b80      	cmp	r3, #128	; 0x80
 80048aa:	d0f2      	beq.n	8004892 <SPI_EndRxTxTransaction+0x52>
 80048ac:	e000      	b.n	80048b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80048ae:	bf00      	nop
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018
 80048c0:	165e9f81 	.word	0x165e9f81

080048c4 <siprintf>:
 80048c4:	b40e      	push	{r1, r2, r3}
 80048c6:	b500      	push	{lr}
 80048c8:	b09c      	sub	sp, #112	; 0x70
 80048ca:	ab1d      	add	r3, sp, #116	; 0x74
 80048cc:	9002      	str	r0, [sp, #8]
 80048ce:	9006      	str	r0, [sp, #24]
 80048d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048d4:	4809      	ldr	r0, [pc, #36]	; (80048fc <siprintf+0x38>)
 80048d6:	9107      	str	r1, [sp, #28]
 80048d8:	9104      	str	r1, [sp, #16]
 80048da:	4909      	ldr	r1, [pc, #36]	; (8004900 <siprintf+0x3c>)
 80048dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e0:	9105      	str	r1, [sp, #20]
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	a902      	add	r1, sp, #8
 80048e8:	f000 f992 	bl	8004c10 <_svfiprintf_r>
 80048ec:	9b02      	ldr	r3, [sp, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	b01c      	add	sp, #112	; 0x70
 80048f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f8:	b003      	add	sp, #12
 80048fa:	4770      	bx	lr
 80048fc:	20000070 	.word	0x20000070
 8004900:	ffff0208 	.word	0xffff0208

08004904 <memset>:
 8004904:	4402      	add	r2, r0
 8004906:	4603      	mov	r3, r0
 8004908:	4293      	cmp	r3, r2
 800490a:	d100      	bne.n	800490e <memset+0xa>
 800490c:	4770      	bx	lr
 800490e:	f803 1b01 	strb.w	r1, [r3], #1
 8004912:	e7f9      	b.n	8004908 <memset+0x4>

08004914 <__errno>:
 8004914:	4b01      	ldr	r3, [pc, #4]	; (800491c <__errno+0x8>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000070 	.word	0x20000070

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4d0d      	ldr	r5, [pc, #52]	; (8004958 <__libc_init_array+0x38>)
 8004924:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	2600      	movs	r6, #0
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	4d0b      	ldr	r5, [pc, #44]	; (8004960 <__libc_init_array+0x40>)
 8004932:	4c0c      	ldr	r4, [pc, #48]	; (8004964 <__libc_init_array+0x44>)
 8004934:	f001 fd00 	bl	8006338 <_init>
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	2600      	movs	r6, #0
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	08006d98 	.word	0x08006d98
 800495c:	08006d98 	.word	0x08006d98
 8004960:	08006d98 	.word	0x08006d98
 8004964:	08006d9c 	.word	0x08006d9c

08004968 <__retarget_lock_acquire_recursive>:
 8004968:	4770      	bx	lr

0800496a <__retarget_lock_release_recursive>:
 800496a:	4770      	bx	lr

0800496c <_free_r>:
 800496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800496e:	2900      	cmp	r1, #0
 8004970:	d044      	beq.n	80049fc <_free_r+0x90>
 8004972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004976:	9001      	str	r0, [sp, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f1a1 0404 	sub.w	r4, r1, #4
 800497e:	bfb8      	it	lt
 8004980:	18e4      	addlt	r4, r4, r3
 8004982:	f000 f8df 	bl	8004b44 <__malloc_lock>
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <_free_r+0x94>)
 8004988:	9801      	ldr	r0, [sp, #4]
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	b933      	cbnz	r3, 800499c <_free_r+0x30>
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6014      	str	r4, [r2, #0]
 8004992:	b003      	add	sp, #12
 8004994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004998:	f000 b8da 	b.w	8004b50 <__malloc_unlock>
 800499c:	42a3      	cmp	r3, r4
 800499e:	d908      	bls.n	80049b2 <_free_r+0x46>
 80049a0:	6825      	ldr	r5, [r4, #0]
 80049a2:	1961      	adds	r1, r4, r5
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf01      	itttt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	1949      	addeq	r1, r1, r5
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	e7ed      	b.n	800498e <_free_r+0x22>
 80049b2:	461a      	mov	r2, r3
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b10b      	cbz	r3, 80049bc <_free_r+0x50>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d9fa      	bls.n	80049b2 <_free_r+0x46>
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	1855      	adds	r5, r2, r1
 80049c0:	42a5      	cmp	r5, r4
 80049c2:	d10b      	bne.n	80049dc <_free_r+0x70>
 80049c4:	6824      	ldr	r4, [r4, #0]
 80049c6:	4421      	add	r1, r4
 80049c8:	1854      	adds	r4, r2, r1
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	d1e0      	bne.n	8004992 <_free_r+0x26>
 80049d0:	681c      	ldr	r4, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	440c      	add	r4, r1
 80049d8:	6014      	str	r4, [r2, #0]
 80049da:	e7da      	b.n	8004992 <_free_r+0x26>
 80049dc:	d902      	bls.n	80049e4 <_free_r+0x78>
 80049de:	230c      	movs	r3, #12
 80049e0:	6003      	str	r3, [r0, #0]
 80049e2:	e7d6      	b.n	8004992 <_free_r+0x26>
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf04      	itt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	bf04      	itt	eq
 80049f4:	1949      	addeq	r1, r1, r5
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	6054      	str	r4, [r2, #4]
 80049fa:	e7ca      	b.n	8004992 <_free_r+0x26>
 80049fc:	b003      	add	sp, #12
 80049fe:	bd30      	pop	{r4, r5, pc}
 8004a00:	20005c48 	.word	0x20005c48

08004a04 <sbrk_aligned>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4e0e      	ldr	r6, [pc, #56]	; (8004a40 <sbrk_aligned+0x3c>)
 8004a08:	460c      	mov	r4, r1
 8004a0a:	6831      	ldr	r1, [r6, #0]
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	b911      	cbnz	r1, 8004a16 <sbrk_aligned+0x12>
 8004a10:	f000 fba6 	bl	8005160 <_sbrk_r>
 8004a14:	6030      	str	r0, [r6, #0]
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 fba1 	bl	8005160 <_sbrk_r>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	d00a      	beq.n	8004a38 <sbrk_aligned+0x34>
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d007      	beq.n	8004a3c <sbrk_aligned+0x38>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 fb96 	bl	8005160 <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d101      	bne.n	8004a3c <sbrk_aligned+0x38>
 8004a38:	f04f 34ff 	mov.w	r4, #4294967295
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	20005c4c 	.word	0x20005c4c

08004a44 <_malloc_r>:
 8004a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a48:	1ccd      	adds	r5, r1, #3
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	4607      	mov	r7, r0
 8004a5a:	db01      	blt.n	8004a60 <_malloc_r+0x1c>
 8004a5c:	42a9      	cmp	r1, r5
 8004a5e:	d905      	bls.n	8004a6c <_malloc_r+0x28>
 8004a60:	230c      	movs	r3, #12
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	2600      	movs	r6, #0
 8004a66:	4630      	mov	r0, r6
 8004a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b40 <_malloc_r+0xfc>
 8004a70:	f000 f868 	bl	8004b44 <__malloc_lock>
 8004a74:	f8d8 3000 	ldr.w	r3, [r8]
 8004a78:	461c      	mov	r4, r3
 8004a7a:	bb5c      	cbnz	r4, 8004ad4 <_malloc_r+0x90>
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f7ff ffc0 	bl	8004a04 <sbrk_aligned>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	4604      	mov	r4, r0
 8004a88:	d155      	bne.n	8004b36 <_malloc_r+0xf2>
 8004a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8004a8e:	4626      	mov	r6, r4
 8004a90:	2e00      	cmp	r6, #0
 8004a92:	d145      	bne.n	8004b20 <_malloc_r+0xdc>
 8004a94:	2c00      	cmp	r4, #0
 8004a96:	d048      	beq.n	8004b2a <_malloc_r+0xe6>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	eb04 0903 	add.w	r9, r4, r3
 8004aa2:	f000 fb5d 	bl	8005160 <_sbrk_r>
 8004aa6:	4581      	cmp	r9, r0
 8004aa8:	d13f      	bne.n	8004b2a <_malloc_r+0xe6>
 8004aaa:	6821      	ldr	r1, [r4, #0]
 8004aac:	1a6d      	subs	r5, r5, r1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f7ff ffa7 	bl	8004a04 <sbrk_aligned>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d037      	beq.n	8004b2a <_malloc_r+0xe6>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	442b      	add	r3, r5
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d038      	beq.n	8004b3a <_malloc_r+0xf6>
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	42a2      	cmp	r2, r4
 8004acc:	d12b      	bne.n	8004b26 <_malloc_r+0xe2>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	e00f      	b.n	8004af4 <_malloc_r+0xb0>
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	1b52      	subs	r2, r2, r5
 8004ad8:	d41f      	bmi.n	8004b1a <_malloc_r+0xd6>
 8004ada:	2a0b      	cmp	r2, #11
 8004adc:	d917      	bls.n	8004b0e <_malloc_r+0xca>
 8004ade:	1961      	adds	r1, r4, r5
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	6025      	str	r5, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	6059      	strne	r1, [r3, #4]
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	bf08      	it	eq
 8004aec:	f8c8 1000 	streq.w	r1, [r8]
 8004af0:	5162      	str	r2, [r4, r5]
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	4638      	mov	r0, r7
 8004af6:	f104 060b 	add.w	r6, r4, #11
 8004afa:	f000 f829 	bl	8004b50 <__malloc_unlock>
 8004afe:	f026 0607 	bic.w	r6, r6, #7
 8004b02:	1d23      	adds	r3, r4, #4
 8004b04:	1af2      	subs	r2, r6, r3
 8004b06:	d0ae      	beq.n	8004a66 <_malloc_r+0x22>
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	50a3      	str	r3, [r4, r2]
 8004b0c:	e7ab      	b.n	8004a66 <_malloc_r+0x22>
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	d1dd      	bne.n	8004ad0 <_malloc_r+0x8c>
 8004b14:	f8c8 2000 	str.w	r2, [r8]
 8004b18:	e7ec      	b.n	8004af4 <_malloc_r+0xb0>
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	6864      	ldr	r4, [r4, #4]
 8004b1e:	e7ac      	b.n	8004a7a <_malloc_r+0x36>
 8004b20:	4634      	mov	r4, r6
 8004b22:	6876      	ldr	r6, [r6, #4]
 8004b24:	e7b4      	b.n	8004a90 <_malloc_r+0x4c>
 8004b26:	4613      	mov	r3, r2
 8004b28:	e7cc      	b.n	8004ac4 <_malloc_r+0x80>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 f80e 	bl	8004b50 <__malloc_unlock>
 8004b34:	e797      	b.n	8004a66 <_malloc_r+0x22>
 8004b36:	6025      	str	r5, [r4, #0]
 8004b38:	e7dc      	b.n	8004af4 <_malloc_r+0xb0>
 8004b3a:	605b      	str	r3, [r3, #4]
 8004b3c:	deff      	udf	#255	; 0xff
 8004b3e:	bf00      	nop
 8004b40:	20005c48 	.word	0x20005c48

08004b44 <__malloc_lock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__malloc_lock+0x8>)
 8004b46:	f7ff bf0f 	b.w	8004968 <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	20005c44 	.word	0x20005c44

08004b50 <__malloc_unlock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_unlock+0x8>)
 8004b52:	f7ff bf0a 	b.w	800496a <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	20005c44 	.word	0x20005c44

08004b5c <__ssputs_r>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	688e      	ldr	r6, [r1, #8]
 8004b62:	461f      	mov	r7, r3
 8004b64:	42be      	cmp	r6, r7
 8004b66:	680b      	ldr	r3, [r1, #0]
 8004b68:	4682      	mov	sl, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4690      	mov	r8, r2
 8004b6e:	d82c      	bhi.n	8004bca <__ssputs_r+0x6e>
 8004b70:	898a      	ldrh	r2, [r1, #12]
 8004b72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b76:	d026      	beq.n	8004bc6 <__ssputs_r+0x6a>
 8004b78:	6965      	ldr	r5, [r4, #20]
 8004b7a:	6909      	ldr	r1, [r1, #16]
 8004b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b80:	eba3 0901 	sub.w	r9, r3, r1
 8004b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b88:	1c7b      	adds	r3, r7, #1
 8004b8a:	444b      	add	r3, r9
 8004b8c:	106d      	asrs	r5, r5, #1
 8004b8e:	429d      	cmp	r5, r3
 8004b90:	bf38      	it	cc
 8004b92:	461d      	movcc	r5, r3
 8004b94:	0553      	lsls	r3, r2, #21
 8004b96:	d527      	bpl.n	8004be8 <__ssputs_r+0x8c>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7ff ff53 	bl	8004a44 <_malloc_r>
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	b360      	cbz	r0, 8004bfc <__ssputs_r+0xa0>
 8004ba2:	6921      	ldr	r1, [r4, #16]
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	f000 faeb 	bl	8005180 <memcpy>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	6126      	str	r6, [r4, #16]
 8004bb8:	6165      	str	r5, [r4, #20]
 8004bba:	444e      	add	r6, r9
 8004bbc:	eba5 0509 	sub.w	r5, r5, r9
 8004bc0:	6026      	str	r6, [r4, #0]
 8004bc2:	60a5      	str	r5, [r4, #8]
 8004bc4:	463e      	mov	r6, r7
 8004bc6:	42be      	cmp	r6, r7
 8004bc8:	d900      	bls.n	8004bcc <__ssputs_r+0x70>
 8004bca:	463e      	mov	r6, r7
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	4632      	mov	r2, r6
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	f000 faab 	bl	800512c <memmove>
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	1b9b      	subs	r3, r3, r6
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	4433      	add	r3, r6
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	2000      	movs	r0, #0
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	462a      	mov	r2, r5
 8004bea:	f000 fad7 	bl	800519c <_realloc_r>
 8004bee:	4606      	mov	r6, r0
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d1e0      	bne.n	8004bb6 <__ssputs_r+0x5a>
 8004bf4:	6921      	ldr	r1, [r4, #16]
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	f7ff feb8 	bl	800496c <_free_r>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	f8ca 3000 	str.w	r3, [sl]
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	e7e9      	b.n	8004be4 <__ssputs_r+0x88>

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4698      	mov	r8, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	d50e      	bpl.n	8004c42 <_svfiprintf_r+0x32>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b963      	cbnz	r3, 8004c42 <_svfiprintf_r+0x32>
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f7ff ff0b 	bl	8004a44 <_malloc_r>
 8004c2e:	6028      	str	r0, [r5, #0]
 8004c30:	6128      	str	r0, [r5, #16]
 8004c32:	b920      	cbnz	r0, 8004c3e <_svfiprintf_r+0x2e>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e0d0      	b.n	8004de0 <_svfiprintf_r+0x1d0>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	616b      	str	r3, [r5, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	2320      	movs	r3, #32
 8004c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c50:	2330      	movs	r3, #48	; 0x30
 8004c52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004df8 <_svfiprintf_r+0x1e8>
 8004c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5a:	f04f 0901 	mov.w	r9, #1
 8004c5e:	4623      	mov	r3, r4
 8004c60:	469a      	mov	sl, r3
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	b10a      	cbz	r2, 8004c6c <_svfiprintf_r+0x5c>
 8004c68:	2a25      	cmp	r2, #37	; 0x25
 8004c6a:	d1f9      	bne.n	8004c60 <_svfiprintf_r+0x50>
 8004c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c70:	d00b      	beq.n	8004c8a <_svfiprintf_r+0x7a>
 8004c72:	465b      	mov	r3, fp
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff ff6f 	bl	8004b5c <__ssputs_r>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f000 80a9 	beq.w	8004dd6 <_svfiprintf_r+0x1c6>
 8004c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c86:	445a      	add	r2, fp
 8004c88:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a1 	beq.w	8004dd6 <_svfiprintf_r+0x1c6>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004caa:	931a      	str	r3, [sp, #104]	; 0x68
 8004cac:	4654      	mov	r4, sl
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	4850      	ldr	r0, [pc, #320]	; (8004df8 <_svfiprintf_r+0x1e8>)
 8004cb6:	f7fb fa93 	bl	80001e0 <memchr>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_svfiprintf_r+0xe6>
 8004cbe:	06d0      	lsls	r0, r2, #27
 8004cc0:	bf44      	itt	mi
 8004cc2:	2320      	movmi	r3, #32
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc8:	0711      	lsls	r1, r2, #28
 8004cca:	bf44      	itt	mi
 8004ccc:	232b      	movmi	r3, #43	; 0x2b
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd8:	d015      	beq.n	8004d06 <_svfiprintf_r+0xf6>
 8004cda:	9a07      	ldr	r2, [sp, #28]
 8004cdc:	4654      	mov	r4, sl
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cea:	3b30      	subs	r3, #48	; 0x30
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d94d      	bls.n	8004d8c <_svfiprintf_r+0x17c>
 8004cf0:	b1b0      	cbz	r0, 8004d20 <_svfiprintf_r+0x110>
 8004cf2:	9207      	str	r2, [sp, #28]
 8004cf4:	e014      	b.n	8004d20 <_svfiprintf_r+0x110>
 8004cf6:	eba0 0308 	sub.w	r3, r0, r8
 8004cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	46a2      	mov	sl, r4
 8004d04:	e7d2      	b.n	8004cac <_svfiprintf_r+0x9c>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9103      	str	r1, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfbb      	ittet	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	f042 0202 	orrlt.w	r2, r2, #2
 8004d18:	9307      	strge	r3, [sp, #28]
 8004d1a:	9307      	strlt	r3, [sp, #28]
 8004d1c:	bfb8      	it	lt
 8004d1e:	9204      	strlt	r2, [sp, #16]
 8004d20:	7823      	ldrb	r3, [r4, #0]
 8004d22:	2b2e      	cmp	r3, #46	; 0x2e
 8004d24:	d10c      	bne.n	8004d40 <_svfiprintf_r+0x130>
 8004d26:	7863      	ldrb	r3, [r4, #1]
 8004d28:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2a:	d134      	bne.n	8004d96 <_svfiprintf_r+0x186>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9203      	str	r2, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfb8      	it	lt
 8004d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d3c:	3402      	adds	r4, #2
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e08 <_svfiprintf_r+0x1f8>
 8004d44:	7821      	ldrb	r1, [r4, #0]
 8004d46:	2203      	movs	r2, #3
 8004d48:	4650      	mov	r0, sl
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	b138      	cbz	r0, 8004d60 <_svfiprintf_r+0x150>
 8004d50:	9b04      	ldr	r3, [sp, #16]
 8004d52:	eba0 000a 	sub.w	r0, r0, sl
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	4082      	lsls	r2, r0
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	4825      	ldr	r0, [pc, #148]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6a:	2206      	movs	r2, #6
 8004d6c:	f7fb fa38 	bl	80001e0 <memchr>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d038      	beq.n	8004de6 <_svfiprintf_r+0x1d6>
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <_svfiprintf_r+0x1f0>)
 8004d76:	bb1b      	cbnz	r3, 8004dc0 <_svfiprintf_r+0x1b0>
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3307      	adds	r3, #7
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	4433      	add	r3, r6
 8004d88:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8a:	e768      	b.n	8004c5e <_svfiprintf_r+0x4e>
 8004d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d90:	460c      	mov	r4, r1
 8004d92:	2001      	movs	r0, #1
 8004d94:	e7a6      	b.n	8004ce4 <_svfiprintf_r+0xd4>
 8004d96:	2300      	movs	r3, #0
 8004d98:	3401      	adds	r4, #1
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f04f 0c0a 	mov.w	ip, #10
 8004da2:	4620      	mov	r0, r4
 8004da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da8:	3a30      	subs	r2, #48	; 0x30
 8004daa:	2a09      	cmp	r2, #9
 8004dac:	d903      	bls.n	8004db6 <_svfiprintf_r+0x1a6>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0c6      	beq.n	8004d40 <_svfiprintf_r+0x130>
 8004db2:	9105      	str	r1, [sp, #20]
 8004db4:	e7c4      	b.n	8004d40 <_svfiprintf_r+0x130>
 8004db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dba:	4604      	mov	r4, r0
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e7f0      	b.n	8004da2 <_svfiprintf_r+0x192>
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <_svfiprintf_r+0x1f4>)
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	1c42      	adds	r2, r0, #1
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	d1d6      	bne.n	8004d84 <_svfiprintf_r+0x174>
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	065b      	lsls	r3, r3, #25
 8004dda:	f53f af2d 	bmi.w	8004c38 <_svfiprintf_r+0x28>
 8004dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de0:	b01d      	add	sp, #116	; 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_svfiprintf_r+0x1f4>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4638      	mov	r0, r7
 8004df2:	f000 f879 	bl	8004ee8 <_printf_i>
 8004df6:	e7eb      	b.n	8004dd0 <_svfiprintf_r+0x1c0>
 8004df8:	08006b80 	.word	0x08006b80
 8004dfc:	08006b8a 	.word	0x08006b8a
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004b5d 	.word	0x08004b5d
 8004e08:	08006b86 	.word	0x08006b86

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4699      	mov	r9, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfb8      	it	lt
 8004e20:	4613      	movlt	r3, r2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc26      	bgt.n	8004ea2 <_printf_common+0x96>
 8004e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e58:	1e13      	subs	r3, r2, #0
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d42b      	bmi.n	8004ebc <_printf_common+0xb0>
 8004e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c0      	blx	r8
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d01e      	beq.n	8004eb0 <_printf_common+0xa4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf02      	ittt	eq
 8004e7e:	68e5      	ldreq	r5, [r4, #12]
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	1aed      	subeq	r5, r5, r3
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	2600      	movs	r6, #0
 8004e98:	341a      	adds	r4, #26
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	d11a      	bne.n	8004ed4 <_printf_common+0xc8>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e008      	b.n	8004eb4 <_printf_common+0xa8>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c0      	blx	r8
 8004eac:	3001      	adds	r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_printf_common+0xac>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7c6      	b.n	8004e4a <_printf_common+0x3e>
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	2030      	movs	r0, #48	; 0x30
 8004ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ec6:	4422      	add	r2, r4
 8004ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7c7      	b.n	8004e64 <_printf_common+0x58>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c0      	blx	r8
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0e6      	beq.n	8004eb0 <_printf_common+0xa4>
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7d9      	b.n	8004e9a <_printf_common+0x8e>
	...

08004ee8 <_printf_i>:
 8004ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	7e0f      	ldrb	r7, [r1, #24]
 8004eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ef0:	2f78      	cmp	r7, #120	; 0x78
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004efe:	d807      	bhi.n	8004f10 <_printf_i+0x28>
 8004f00:	2f62      	cmp	r7, #98	; 0x62
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x32>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	f000 80d4 	beq.w	80050b2 <_printf_i+0x1ca>
 8004f0a:	2f58      	cmp	r7, #88	; 0x58
 8004f0c:	f000 80c0 	beq.w	8005090 <_printf_i+0x1a8>
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f18:	e03a      	b.n	8004f90 <_printf_i+0xa8>
 8004f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d8f6      	bhi.n	8004f10 <_printf_i+0x28>
 8004f22:	a101      	add	r1, pc, #4	; (adr r1, 8004f28 <_printf_i+0x40>)
 8004f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f11 	.word	0x08004f11
 8004f34:	08004f11 	.word	0x08004f11
 8004f38:	08004f11 	.word	0x08004f11
 8004f3c:	08004f11 	.word	0x08004f11
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f11 	.word	0x08004f11
 8004f48:	08004f11 	.word	0x08004f11
 8004f4c:	08004f11 	.word	0x08004f11
 8004f50:	08004f11 	.word	0x08004f11
 8004f54:	08005099 	.word	0x08005099
 8004f58:	08004fc1 	.word	0x08004fc1
 8004f5c:	08005053 	.word	0x08005053
 8004f60:	08004f11 	.word	0x08004f11
 8004f64:	08004f11 	.word	0x08004f11
 8004f68:	080050bb 	.word	0x080050bb
 8004f6c:	08004f11 	.word	0x08004f11
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004f11 	.word	0x08004f11
 8004f78:	08004f11 	.word	0x08004f11
 8004f7c:	0800505b 	.word	0x0800505b
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	602a      	str	r2, [r5, #0]
 8004f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09f      	b.n	80050d4 <_printf_i+0x1ec>
 8004f94:	6820      	ldr	r0, [r4, #0]
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	0607      	lsls	r7, r0, #24
 8004f9a:	f103 0104 	add.w	r1, r3, #4
 8004f9e:	6029      	str	r1, [r5, #0]
 8004fa0:	d501      	bpl.n	8004fa6 <_printf_i+0xbe>
 8004fa2:	681e      	ldr	r6, [r3, #0]
 8004fa4:	e003      	b.n	8004fae <_printf_i+0xc6>
 8004fa6:	0646      	lsls	r6, r0, #25
 8004fa8:	d5fb      	bpl.n	8004fa2 <_printf_i+0xba>
 8004faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	da03      	bge.n	8004fba <_printf_i+0xd2>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	4276      	negs	r6, r6
 8004fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fba:	485a      	ldr	r0, [pc, #360]	; (8005124 <_printf_i+0x23c>)
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	e012      	b.n	8004fe6 <_printf_i+0xfe>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1d19      	adds	r1, r3, #4
 8004fc6:	6029      	str	r1, [r5, #0]
 8004fc8:	0605      	lsls	r5, r0, #24
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0xe8>
 8004fcc:	681e      	ldr	r6, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0xee>
 8004fd0:	0641      	lsls	r1, r0, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0xe4>
 8004fd4:	881e      	ldrh	r6, [r3, #0]
 8004fd6:	4853      	ldr	r0, [pc, #332]	; (8005124 <_printf_i+0x23c>)
 8004fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004fda:	bf0c      	ite	eq
 8004fdc:	2308      	moveq	r3, #8
 8004fde:	230a      	movne	r3, #10
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fe6:	6865      	ldr	r5, [r4, #4]
 8004fe8:	60a5      	str	r5, [r4, #8]
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	bfa2      	ittt	ge
 8004fee:	6821      	ldrge	r1, [r4, #0]
 8004ff0:	f021 0104 	bicge.w	r1, r1, #4
 8004ff4:	6021      	strge	r1, [r4, #0]
 8004ff6:	b90e      	cbnz	r6, 8004ffc <_printf_i+0x114>
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	d04b      	beq.n	8005094 <_printf_i+0x1ac>
 8004ffc:	4615      	mov	r5, r2
 8004ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005002:	fb03 6711 	mls	r7, r3, r1, r6
 8005006:	5dc7      	ldrb	r7, [r0, r7]
 8005008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800500c:	4637      	mov	r7, r6
 800500e:	42bb      	cmp	r3, r7
 8005010:	460e      	mov	r6, r1
 8005012:	d9f4      	bls.n	8004ffe <_printf_i+0x116>
 8005014:	2b08      	cmp	r3, #8
 8005016:	d10b      	bne.n	8005030 <_printf_i+0x148>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	07de      	lsls	r6, r3, #31
 800501c:	d508      	bpl.n	8005030 <_printf_i+0x148>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	6861      	ldr	r1, [r4, #4]
 8005022:	4299      	cmp	r1, r3
 8005024:	bfde      	ittt	le
 8005026:	2330      	movle	r3, #48	; 0x30
 8005028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800502c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005030:	1b52      	subs	r2, r2, r5
 8005032:	6122      	str	r2, [r4, #16]
 8005034:	f8cd a000 	str.w	sl, [sp]
 8005038:	464b      	mov	r3, r9
 800503a:	aa03      	add	r2, sp, #12
 800503c:	4621      	mov	r1, r4
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fee4 	bl	8004e0c <_printf_common>
 8005044:	3001      	adds	r0, #1
 8005046:	d14a      	bne.n	80050de <_printf_i+0x1f6>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	b004      	add	sp, #16
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f043 0320 	orr.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	4833      	ldr	r0, [pc, #204]	; (8005128 <_printf_i+0x240>)
 800505c:	2778      	movs	r7, #120	; 0x78
 800505e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	6829      	ldr	r1, [r5, #0]
 8005066:	061f      	lsls	r7, r3, #24
 8005068:	f851 6b04 	ldr.w	r6, [r1], #4
 800506c:	d402      	bmi.n	8005074 <_printf_i+0x18c>
 800506e:	065f      	lsls	r7, r3, #25
 8005070:	bf48      	it	mi
 8005072:	b2b6      	uxthmi	r6, r6
 8005074:	07df      	lsls	r7, r3, #31
 8005076:	bf48      	it	mi
 8005078:	f043 0320 	orrmi.w	r3, r3, #32
 800507c:	6029      	str	r1, [r5, #0]
 800507e:	bf48      	it	mi
 8005080:	6023      	strmi	r3, [r4, #0]
 8005082:	b91e      	cbnz	r6, 800508c <_printf_i+0x1a4>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	2310      	movs	r3, #16
 800508e:	e7a7      	b.n	8004fe0 <_printf_i+0xf8>
 8005090:	4824      	ldr	r0, [pc, #144]	; (8005124 <_printf_i+0x23c>)
 8005092:	e7e4      	b.n	800505e <_printf_i+0x176>
 8005094:	4615      	mov	r5, r2
 8005096:	e7bd      	b.n	8005014 <_printf_i+0x12c>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	6826      	ldr	r6, [r4, #0]
 800509c:	6961      	ldr	r1, [r4, #20]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6028      	str	r0, [r5, #0]
 80050a2:	0635      	lsls	r5, r6, #24
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0x1c4>
 80050a8:	6019      	str	r1, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0x1ca>
 80050ac:	0670      	lsls	r0, r6, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0x1c0>
 80050b0:	8019      	strh	r1, [r3, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	4615      	mov	r5, r2
 80050b8:	e7bc      	b.n	8005034 <_printf_i+0x14c>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	1d1a      	adds	r2, r3, #4
 80050be:	602a      	str	r2, [r5, #0]
 80050c0:	681d      	ldr	r5, [r3, #0]
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	2100      	movs	r1, #0
 80050c6:	4628      	mov	r0, r5
 80050c8:	f7fb f88a 	bl	80001e0 <memchr>
 80050cc:	b108      	cbz	r0, 80050d2 <_printf_i+0x1ea>
 80050ce:	1b40      	subs	r0, r0, r5
 80050d0:	6060      	str	r0, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	2300      	movs	r3, #0
 80050d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050dc:	e7aa      	b.n	8005034 <_printf_i+0x14c>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	47d0      	blx	sl
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0ad      	beq.n	8005048 <_printf_i+0x160>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d413      	bmi.n	800511a <_printf_i+0x232>
 80050f2:	68e0      	ldr	r0, [r4, #12]
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	4298      	cmp	r0, r3
 80050f8:	bfb8      	it	lt
 80050fa:	4618      	movlt	r0, r3
 80050fc:	e7a6      	b.n	800504c <_printf_i+0x164>
 80050fe:	2301      	movs	r3, #1
 8005100:	4632      	mov	r2, r6
 8005102:	4649      	mov	r1, r9
 8005104:	4640      	mov	r0, r8
 8005106:	47d0      	blx	sl
 8005108:	3001      	adds	r0, #1
 800510a:	d09d      	beq.n	8005048 <_printf_i+0x160>
 800510c:	3501      	adds	r5, #1
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	9903      	ldr	r1, [sp, #12]
 8005112:	1a5b      	subs	r3, r3, r1
 8005114:	42ab      	cmp	r3, r5
 8005116:	dcf2      	bgt.n	80050fe <_printf_i+0x216>
 8005118:	e7eb      	b.n	80050f2 <_printf_i+0x20a>
 800511a:	2500      	movs	r5, #0
 800511c:	f104 0619 	add.w	r6, r4, #25
 8005120:	e7f5      	b.n	800510e <_printf_i+0x226>
 8005122:	bf00      	nop
 8005124:	08006b91 	.word	0x08006b91
 8005128:	08006ba2 	.word	0x08006ba2

0800512c <memmove>:
 800512c:	4288      	cmp	r0, r1
 800512e:	b510      	push	{r4, lr}
 8005130:	eb01 0402 	add.w	r4, r1, r2
 8005134:	d902      	bls.n	800513c <memmove+0x10>
 8005136:	4284      	cmp	r4, r0
 8005138:	4623      	mov	r3, r4
 800513a:	d807      	bhi.n	800514c <memmove+0x20>
 800513c:	1e43      	subs	r3, r0, #1
 800513e:	42a1      	cmp	r1, r4
 8005140:	d008      	beq.n	8005154 <memmove+0x28>
 8005142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800514a:	e7f8      	b.n	800513e <memmove+0x12>
 800514c:	4402      	add	r2, r0
 800514e:	4601      	mov	r1, r0
 8005150:	428a      	cmp	r2, r1
 8005152:	d100      	bne.n	8005156 <memmove+0x2a>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800515a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800515e:	e7f7      	b.n	8005150 <memmove+0x24>

08005160 <_sbrk_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d06      	ldr	r5, [pc, #24]	; (800517c <_sbrk_r+0x1c>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	602b      	str	r3, [r5, #0]
 800516c:	f7fe f96a 	bl	8003444 <_sbrk>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_sbrk_r+0x1a>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_sbrk_r+0x1a>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20005c40 	.word	0x20005c40

08005180 <memcpy>:
 8005180:	440a      	add	r2, r1
 8005182:	4291      	cmp	r1, r2
 8005184:	f100 33ff 	add.w	r3, r0, #4294967295
 8005188:	d100      	bne.n	800518c <memcpy+0xc>
 800518a:	4770      	bx	lr
 800518c:	b510      	push	{r4, lr}
 800518e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005196:	4291      	cmp	r1, r2
 8005198:	d1f9      	bne.n	800518e <memcpy+0xe>
 800519a:	bd10      	pop	{r4, pc}

0800519c <_realloc_r>:
 800519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a0:	4680      	mov	r8, r0
 80051a2:	4614      	mov	r4, r2
 80051a4:	460e      	mov	r6, r1
 80051a6:	b921      	cbnz	r1, 80051b2 <_realloc_r+0x16>
 80051a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ac:	4611      	mov	r1, r2
 80051ae:	f7ff bc49 	b.w	8004a44 <_malloc_r>
 80051b2:	b92a      	cbnz	r2, 80051c0 <_realloc_r+0x24>
 80051b4:	f7ff fbda 	bl	800496c <_free_r>
 80051b8:	4625      	mov	r5, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c0:	f000 f81b 	bl	80051fa <_malloc_usable_size_r>
 80051c4:	4284      	cmp	r4, r0
 80051c6:	4607      	mov	r7, r0
 80051c8:	d802      	bhi.n	80051d0 <_realloc_r+0x34>
 80051ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ce:	d812      	bhi.n	80051f6 <_realloc_r+0x5a>
 80051d0:	4621      	mov	r1, r4
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fc36 	bl	8004a44 <_malloc_r>
 80051d8:	4605      	mov	r5, r0
 80051da:	2800      	cmp	r0, #0
 80051dc:	d0ed      	beq.n	80051ba <_realloc_r+0x1e>
 80051de:	42bc      	cmp	r4, r7
 80051e0:	4622      	mov	r2, r4
 80051e2:	4631      	mov	r1, r6
 80051e4:	bf28      	it	cs
 80051e6:	463a      	movcs	r2, r7
 80051e8:	f7ff ffca 	bl	8005180 <memcpy>
 80051ec:	4631      	mov	r1, r6
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7ff fbbc 	bl	800496c <_free_r>
 80051f4:	e7e1      	b.n	80051ba <_realloc_r+0x1e>
 80051f6:	4635      	mov	r5, r6
 80051f8:	e7df      	b.n	80051ba <_realloc_r+0x1e>

080051fa <_malloc_usable_size_r>:
 80051fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fe:	1f18      	subs	r0, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	bfbc      	itt	lt
 8005204:	580b      	ldrlt	r3, [r1, r0]
 8005206:	18c0      	addlt	r0, r0, r3
 8005208:	4770      	bx	lr
 800520a:	0000      	movs	r0, r0
 800520c:	0000      	movs	r0, r0
	...

08005210 <cos>:
 8005210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005212:	ec53 2b10 	vmov	r2, r3, d0
 8005216:	4826      	ldr	r0, [pc, #152]	; (80052b0 <cos+0xa0>)
 8005218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800521c:	4281      	cmp	r1, r0
 800521e:	dc06      	bgt.n	800522e <cos+0x1e>
 8005220:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80052a8 <cos+0x98>
 8005224:	b005      	add	sp, #20
 8005226:	f85d eb04 	ldr.w	lr, [sp], #4
 800522a:	f000 b89d 	b.w	8005368 <__kernel_cos>
 800522e:	4821      	ldr	r0, [pc, #132]	; (80052b4 <cos+0xa4>)
 8005230:	4281      	cmp	r1, r0
 8005232:	dd09      	ble.n	8005248 <cos+0x38>
 8005234:	ee10 0a10 	vmov	r0, s0
 8005238:	4619      	mov	r1, r3
 800523a:	f7fb f94f 	bl	80004dc <__aeabi_dsub>
 800523e:	ec41 0b10 	vmov	d0, r0, r1
 8005242:	b005      	add	sp, #20
 8005244:	f85d fb04 	ldr.w	pc, [sp], #4
 8005248:	4668      	mov	r0, sp
 800524a:	f000 fa15 	bl	8005678 <__ieee754_rem_pio2>
 800524e:	f000 0003 	and.w	r0, r0, #3
 8005252:	2801      	cmp	r0, #1
 8005254:	d00b      	beq.n	800526e <cos+0x5e>
 8005256:	2802      	cmp	r0, #2
 8005258:	d016      	beq.n	8005288 <cos+0x78>
 800525a:	b9e0      	cbnz	r0, 8005296 <cos+0x86>
 800525c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005260:	ed9d 0b00 	vldr	d0, [sp]
 8005264:	f000 f880 	bl	8005368 <__kernel_cos>
 8005268:	ec51 0b10 	vmov	r0, r1, d0
 800526c:	e7e7      	b.n	800523e <cos+0x2e>
 800526e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005272:	ed9d 0b00 	vldr	d0, [sp]
 8005276:	f000 f93f 	bl	80054f8 <__kernel_sin>
 800527a:	ec53 2b10 	vmov	r2, r3, d0
 800527e:	ee10 0a10 	vmov	r0, s0
 8005282:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005286:	e7da      	b.n	800523e <cos+0x2e>
 8005288:	ed9d 1b02 	vldr	d1, [sp, #8]
 800528c:	ed9d 0b00 	vldr	d0, [sp]
 8005290:	f000 f86a 	bl	8005368 <__kernel_cos>
 8005294:	e7f1      	b.n	800527a <cos+0x6a>
 8005296:	ed9d 1b02 	vldr	d1, [sp, #8]
 800529a:	ed9d 0b00 	vldr	d0, [sp]
 800529e:	2001      	movs	r0, #1
 80052a0:	f000 f92a 	bl	80054f8 <__kernel_sin>
 80052a4:	e7e0      	b.n	8005268 <cos+0x58>
 80052a6:	bf00      	nop
	...
 80052b0:	3fe921fb 	.word	0x3fe921fb
 80052b4:	7fefffff 	.word	0x7fefffff

080052b8 <sin>:
 80052b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052ba:	ec53 2b10 	vmov	r2, r3, d0
 80052be:	4828      	ldr	r0, [pc, #160]	; (8005360 <sin+0xa8>)
 80052c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052c4:	4281      	cmp	r1, r0
 80052c6:	dc07      	bgt.n	80052d8 <sin+0x20>
 80052c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005358 <sin+0xa0>
 80052cc:	2000      	movs	r0, #0
 80052ce:	b005      	add	sp, #20
 80052d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d4:	f000 b910 	b.w	80054f8 <__kernel_sin>
 80052d8:	4822      	ldr	r0, [pc, #136]	; (8005364 <sin+0xac>)
 80052da:	4281      	cmp	r1, r0
 80052dc:	dd09      	ble.n	80052f2 <sin+0x3a>
 80052de:	ee10 0a10 	vmov	r0, s0
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7fb f8fa 	bl	80004dc <__aeabi_dsub>
 80052e8:	ec41 0b10 	vmov	d0, r0, r1
 80052ec:	b005      	add	sp, #20
 80052ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80052f2:	4668      	mov	r0, sp
 80052f4:	f000 f9c0 	bl	8005678 <__ieee754_rem_pio2>
 80052f8:	f000 0003 	and.w	r0, r0, #3
 80052fc:	2801      	cmp	r0, #1
 80052fe:	d00c      	beq.n	800531a <sin+0x62>
 8005300:	2802      	cmp	r0, #2
 8005302:	d011      	beq.n	8005328 <sin+0x70>
 8005304:	b9f0      	cbnz	r0, 8005344 <sin+0x8c>
 8005306:	ed9d 1b02 	vldr	d1, [sp, #8]
 800530a:	ed9d 0b00 	vldr	d0, [sp]
 800530e:	2001      	movs	r0, #1
 8005310:	f000 f8f2 	bl	80054f8 <__kernel_sin>
 8005314:	ec51 0b10 	vmov	r0, r1, d0
 8005318:	e7e6      	b.n	80052e8 <sin+0x30>
 800531a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800531e:	ed9d 0b00 	vldr	d0, [sp]
 8005322:	f000 f821 	bl	8005368 <__kernel_cos>
 8005326:	e7f5      	b.n	8005314 <sin+0x5c>
 8005328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800532c:	ed9d 0b00 	vldr	d0, [sp]
 8005330:	2001      	movs	r0, #1
 8005332:	f000 f8e1 	bl	80054f8 <__kernel_sin>
 8005336:	ec53 2b10 	vmov	r2, r3, d0
 800533a:	ee10 0a10 	vmov	r0, s0
 800533e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005342:	e7d1      	b.n	80052e8 <sin+0x30>
 8005344:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005348:	ed9d 0b00 	vldr	d0, [sp]
 800534c:	f000 f80c 	bl	8005368 <__kernel_cos>
 8005350:	e7f1      	b.n	8005336 <sin+0x7e>
 8005352:	bf00      	nop
 8005354:	f3af 8000 	nop.w
	...
 8005360:	3fe921fb 	.word	0x3fe921fb
 8005364:	7fefffff 	.word	0x7fefffff

08005368 <__kernel_cos>:
 8005368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	ec57 6b10 	vmov	r6, r7, d0
 8005370:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005374:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005378:	ed8d 1b00 	vstr	d1, [sp]
 800537c:	da07      	bge.n	800538e <__kernel_cos+0x26>
 800537e:	ee10 0a10 	vmov	r0, s0
 8005382:	4639      	mov	r1, r7
 8005384:	f7fb faea 	bl	800095c <__aeabi_d2iz>
 8005388:	2800      	cmp	r0, #0
 800538a:	f000 8088 	beq.w	800549e <__kernel_cos+0x136>
 800538e:	4632      	mov	r2, r6
 8005390:	463b      	mov	r3, r7
 8005392:	4630      	mov	r0, r6
 8005394:	4639      	mov	r1, r7
 8005396:	f7fa ff73 	bl	8000280 <__aeabi_dmul>
 800539a:	4b51      	ldr	r3, [pc, #324]	; (80054e0 <__kernel_cos+0x178>)
 800539c:	2200      	movs	r2, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	f7fa ff6d 	bl	8000280 <__aeabi_dmul>
 80053a6:	a340      	add	r3, pc, #256	; (adr r3, 80054a8 <__kernel_cos+0x140>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	4682      	mov	sl, r0
 80053ae:	468b      	mov	fp, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fa ff64 	bl	8000280 <__aeabi_dmul>
 80053b8:	a33d      	add	r3, pc, #244	; (adr r3, 80054b0 <__kernel_cos+0x148>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f88f 	bl	80004e0 <__adddf3>
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f7fa ff5b 	bl	8000280 <__aeabi_dmul>
 80053ca:	a33b      	add	r3, pc, #236	; (adr r3, 80054b8 <__kernel_cos+0x150>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f884 	bl	80004dc <__aeabi_dsub>
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	f7fa ff52 	bl	8000280 <__aeabi_dmul>
 80053dc:	a338      	add	r3, pc, #224	; (adr r3, 80054c0 <__kernel_cos+0x158>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fb f87d 	bl	80004e0 <__adddf3>
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	f7fa ff49 	bl	8000280 <__aeabi_dmul>
 80053ee:	a336      	add	r3, pc, #216	; (adr r3, 80054c8 <__kernel_cos+0x160>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fb f872 	bl	80004dc <__aeabi_dsub>
 80053f8:	4622      	mov	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	f7fa ff40 	bl	8000280 <__aeabi_dmul>
 8005400:	a333      	add	r3, pc, #204	; (adr r3, 80054d0 <__kernel_cos+0x168>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fb f86b 	bl	80004e0 <__adddf3>
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	f7fa ff37 	bl	8000280 <__aeabi_dmul>
 8005412:	4622      	mov	r2, r4
 8005414:	462b      	mov	r3, r5
 8005416:	f7fa ff33 	bl	8000280 <__aeabi_dmul>
 800541a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800541e:	4604      	mov	r4, r0
 8005420:	460d      	mov	r5, r1
 8005422:	4630      	mov	r0, r6
 8005424:	4639      	mov	r1, r7
 8005426:	f7fa ff2b 	bl	8000280 <__aeabi_dmul>
 800542a:	460b      	mov	r3, r1
 800542c:	4602      	mov	r2, r0
 800542e:	4629      	mov	r1, r5
 8005430:	4620      	mov	r0, r4
 8005432:	f7fb f853 	bl	80004dc <__aeabi_dsub>
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <__kernel_cos+0x17c>)
 8005438:	4598      	cmp	r8, r3
 800543a:	4606      	mov	r6, r0
 800543c:	460f      	mov	r7, r1
 800543e:	dc10      	bgt.n	8005462 <__kernel_cos+0xfa>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4650      	mov	r0, sl
 8005446:	4659      	mov	r1, fp
 8005448:	f7fb f848 	bl	80004dc <__aeabi_dsub>
 800544c:	460b      	mov	r3, r1
 800544e:	4926      	ldr	r1, [pc, #152]	; (80054e8 <__kernel_cos+0x180>)
 8005450:	4602      	mov	r2, r0
 8005452:	2000      	movs	r0, #0
 8005454:	f7fb f842 	bl	80004dc <__aeabi_dsub>
 8005458:	ec41 0b10 	vmov	d0, r0, r1
 800545c:	b003      	add	sp, #12
 800545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <__kernel_cos+0x184>)
 8005464:	4920      	ldr	r1, [pc, #128]	; (80054e8 <__kernel_cos+0x180>)
 8005466:	4598      	cmp	r8, r3
 8005468:	bfcc      	ite	gt
 800546a:	4d21      	ldrgt	r5, [pc, #132]	; (80054f0 <__kernel_cos+0x188>)
 800546c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005470:	2400      	movs	r4, #0
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	2000      	movs	r0, #0
 8005478:	f7fb f830 	bl	80004dc <__aeabi_dsub>
 800547c:	4622      	mov	r2, r4
 800547e:	4680      	mov	r8, r0
 8005480:	4689      	mov	r9, r1
 8005482:	462b      	mov	r3, r5
 8005484:	4650      	mov	r0, sl
 8005486:	4659      	mov	r1, fp
 8005488:	f7fb f828 	bl	80004dc <__aeabi_dsub>
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	f7fb f824 	bl	80004dc <__aeabi_dsub>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4640      	mov	r0, r8
 800549a:	4649      	mov	r1, r9
 800549c:	e7da      	b.n	8005454 <__kernel_cos+0xec>
 800549e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80054d8 <__kernel_cos+0x170>
 80054a2:	e7db      	b.n	800545c <__kernel_cos+0xf4>
 80054a4:	f3af 8000 	nop.w
 80054a8:	be8838d4 	.word	0xbe8838d4
 80054ac:	bda8fae9 	.word	0xbda8fae9
 80054b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80054b4:	3e21ee9e 	.word	0x3e21ee9e
 80054b8:	809c52ad 	.word	0x809c52ad
 80054bc:	3e927e4f 	.word	0x3e927e4f
 80054c0:	19cb1590 	.word	0x19cb1590
 80054c4:	3efa01a0 	.word	0x3efa01a0
 80054c8:	16c15177 	.word	0x16c15177
 80054cc:	3f56c16c 	.word	0x3f56c16c
 80054d0:	5555554c 	.word	0x5555554c
 80054d4:	3fa55555 	.word	0x3fa55555
 80054d8:	00000000 	.word	0x00000000
 80054dc:	3ff00000 	.word	0x3ff00000
 80054e0:	3fe00000 	.word	0x3fe00000
 80054e4:	3fd33332 	.word	0x3fd33332
 80054e8:	3ff00000 	.word	0x3ff00000
 80054ec:	3fe90000 	.word	0x3fe90000
 80054f0:	3fd20000 	.word	0x3fd20000
 80054f4:	00000000 	.word	0x00000000

080054f8 <__kernel_sin>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	ed2d 8b04 	vpush	{d8-d9}
 8005500:	eeb0 8a41 	vmov.f32	s16, s2
 8005504:	eef0 8a61 	vmov.f32	s17, s3
 8005508:	ec55 4b10 	vmov	r4, r5, d0
 800550c:	b083      	sub	sp, #12
 800550e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005512:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005516:	9001      	str	r0, [sp, #4]
 8005518:	da06      	bge.n	8005528 <__kernel_sin+0x30>
 800551a:	ee10 0a10 	vmov	r0, s0
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb fa1c 	bl	800095c <__aeabi_d2iz>
 8005524:	2800      	cmp	r0, #0
 8005526:	d051      	beq.n	80055cc <__kernel_sin+0xd4>
 8005528:	4622      	mov	r2, r4
 800552a:	462b      	mov	r3, r5
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fa fea6 	bl	8000280 <__aeabi_dmul>
 8005534:	4682      	mov	sl, r0
 8005536:	468b      	mov	fp, r1
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4620      	mov	r0, r4
 800553e:	4629      	mov	r1, r5
 8005540:	f7fa fe9e 	bl	8000280 <__aeabi_dmul>
 8005544:	a341      	add	r3, pc, #260	; (adr r3, 800564c <__kernel_sin+0x154>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4680      	mov	r8, r0
 800554c:	4689      	mov	r9, r1
 800554e:	4650      	mov	r0, sl
 8005550:	4659      	mov	r1, fp
 8005552:	f7fa fe95 	bl	8000280 <__aeabi_dmul>
 8005556:	a33f      	add	r3, pc, #252	; (adr r3, 8005654 <__kernel_sin+0x15c>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fa ffbe 	bl	80004dc <__aeabi_dsub>
 8005560:	4652      	mov	r2, sl
 8005562:	465b      	mov	r3, fp
 8005564:	f7fa fe8c 	bl	8000280 <__aeabi_dmul>
 8005568:	a33c      	add	r3, pc, #240	; (adr r3, 800565c <__kernel_sin+0x164>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fa ffb7 	bl	80004e0 <__adddf3>
 8005572:	4652      	mov	r2, sl
 8005574:	465b      	mov	r3, fp
 8005576:	f7fa fe83 	bl	8000280 <__aeabi_dmul>
 800557a:	a33a      	add	r3, pc, #232	; (adr r3, 8005664 <__kernel_sin+0x16c>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fa ffac 	bl	80004dc <__aeabi_dsub>
 8005584:	4652      	mov	r2, sl
 8005586:	465b      	mov	r3, fp
 8005588:	f7fa fe7a 	bl	8000280 <__aeabi_dmul>
 800558c:	a337      	add	r3, pc, #220	; (adr r3, 800566c <__kernel_sin+0x174>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fa ffa5 	bl	80004e0 <__adddf3>
 8005596:	9b01      	ldr	r3, [sp, #4]
 8005598:	4606      	mov	r6, r0
 800559a:	460f      	mov	r7, r1
 800559c:	b9eb      	cbnz	r3, 80055da <__kernel_sin+0xe2>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4650      	mov	r0, sl
 80055a4:	4659      	mov	r1, fp
 80055a6:	f7fa fe6b 	bl	8000280 <__aeabi_dmul>
 80055aa:	a325      	add	r3, pc, #148	; (adr r3, 8005640 <__kernel_sin+0x148>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa ff94 	bl	80004dc <__aeabi_dsub>
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	f7fa fe62 	bl	8000280 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fa ff8c 	bl	80004e0 <__adddf3>
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	ec45 4b10 	vmov	d0, r4, r5
 80055d0:	b003      	add	sp, #12
 80055d2:	ecbd 8b04 	vpop	{d8-d9}
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <__kernel_sin+0x150>)
 80055dc:	ec51 0b18 	vmov	r0, r1, d8
 80055e0:	2200      	movs	r2, #0
 80055e2:	f7fa fe4d 	bl	8000280 <__aeabi_dmul>
 80055e6:	4632      	mov	r2, r6
 80055e8:	ec41 0b19 	vmov	d9, r0, r1
 80055ec:	463b      	mov	r3, r7
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fe45 	bl	8000280 <__aeabi_dmul>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	ec51 0b19 	vmov	r0, r1, d9
 80055fe:	f7fa ff6d 	bl	80004dc <__aeabi_dsub>
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	f7fa fe3b 	bl	8000280 <__aeabi_dmul>
 800560a:	ec53 2b18 	vmov	r2, r3, d8
 800560e:	f7fa ff65 	bl	80004dc <__aeabi_dsub>
 8005612:	a30b      	add	r3, pc, #44	; (adr r3, 8005640 <__kernel_sin+0x148>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	4640      	mov	r0, r8
 800561e:	4649      	mov	r1, r9
 8005620:	f7fa fe2e 	bl	8000280 <__aeabi_dmul>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4630      	mov	r0, r6
 800562a:	4639      	mov	r1, r7
 800562c:	f7fa ff58 	bl	80004e0 <__adddf3>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4620      	mov	r0, r4
 8005636:	4629      	mov	r1, r5
 8005638:	f7fa ff50 	bl	80004dc <__aeabi_dsub>
 800563c:	e7c4      	b.n	80055c8 <__kernel_sin+0xd0>
 800563e:	bf00      	nop
 8005640:	55555549 	.word	0x55555549
 8005644:	3fc55555 	.word	0x3fc55555
 8005648:	3fe00000 	.word	0x3fe00000
 800564c:	5acfd57c 	.word	0x5acfd57c
 8005650:	3de5d93a 	.word	0x3de5d93a
 8005654:	8a2b9ceb 	.word	0x8a2b9ceb
 8005658:	3e5ae5e6 	.word	0x3e5ae5e6
 800565c:	57b1fe7d 	.word	0x57b1fe7d
 8005660:	3ec71de3 	.word	0x3ec71de3
 8005664:	19c161d5 	.word	0x19c161d5
 8005668:	3f2a01a0 	.word	0x3f2a01a0
 800566c:	1110f8a6 	.word	0x1110f8a6
 8005670:	3f811111 	.word	0x3f811111
 8005674:	00000000 	.word	0x00000000

08005678 <__ieee754_rem_pio2>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ed2d 8b02 	vpush	{d8}
 8005680:	ec55 4b10 	vmov	r4, r5, d0
 8005684:	4bca      	ldr	r3, [pc, #808]	; (80059b0 <__ieee754_rem_pio2+0x338>)
 8005686:	b08b      	sub	sp, #44	; 0x2c
 8005688:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800568c:	4598      	cmp	r8, r3
 800568e:	4682      	mov	sl, r0
 8005690:	9502      	str	r5, [sp, #8]
 8005692:	dc08      	bgt.n	80056a6 <__ieee754_rem_pio2+0x2e>
 8005694:	2200      	movs	r2, #0
 8005696:	2300      	movs	r3, #0
 8005698:	ed80 0b00 	vstr	d0, [r0]
 800569c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80056a0:	f04f 0b00 	mov.w	fp, #0
 80056a4:	e028      	b.n	80056f8 <__ieee754_rem_pio2+0x80>
 80056a6:	4bc3      	ldr	r3, [pc, #780]	; (80059b4 <__ieee754_rem_pio2+0x33c>)
 80056a8:	4598      	cmp	r8, r3
 80056aa:	dc78      	bgt.n	800579e <__ieee754_rem_pio2+0x126>
 80056ac:	9b02      	ldr	r3, [sp, #8]
 80056ae:	4ec2      	ldr	r6, [pc, #776]	; (80059b8 <__ieee754_rem_pio2+0x340>)
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	ee10 0a10 	vmov	r0, s0
 80056b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005978 <__ieee754_rem_pio2+0x300>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4629      	mov	r1, r5
 80056be:	dd39      	ble.n	8005734 <__ieee754_rem_pio2+0xbc>
 80056c0:	f7fa ff0c 	bl	80004dc <__aeabi_dsub>
 80056c4:	45b0      	cmp	r8, r6
 80056c6:	4604      	mov	r4, r0
 80056c8:	460d      	mov	r5, r1
 80056ca:	d01b      	beq.n	8005704 <__ieee754_rem_pio2+0x8c>
 80056cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005980 <__ieee754_rem_pio2+0x308>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fa ff03 	bl	80004dc <__aeabi_dsub>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	e9ca 2300 	strd	r2, r3, [sl]
 80056de:	4620      	mov	r0, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	f7fa fefb 	bl	80004dc <__aeabi_dsub>
 80056e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005980 <__ieee754_rem_pio2+0x308>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fa fef6 	bl	80004dc <__aeabi_dsub>
 80056f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056f4:	f04f 0b01 	mov.w	fp, #1
 80056f8:	4658      	mov	r0, fp
 80056fa:	b00b      	add	sp, #44	; 0x2c
 80056fc:	ecbd 8b02 	vpop	{d8}
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	a3a0      	add	r3, pc, #640	; (adr r3, 8005988 <__ieee754_rem_pio2+0x310>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fee7 	bl	80004dc <__aeabi_dsub>
 800570e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005990 <__ieee754_rem_pio2+0x318>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	4604      	mov	r4, r0
 8005716:	460d      	mov	r5, r1
 8005718:	f7fa fee0 	bl	80004dc <__aeabi_dsub>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9ca 2300 	strd	r2, r3, [sl]
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fa fed8 	bl	80004dc <__aeabi_dsub>
 800572c:	a398      	add	r3, pc, #608	; (adr r3, 8005990 <__ieee754_rem_pio2+0x318>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	e7db      	b.n	80056ec <__ieee754_rem_pio2+0x74>
 8005734:	f7fa fed4 	bl	80004e0 <__adddf3>
 8005738:	45b0      	cmp	r8, r6
 800573a:	4604      	mov	r4, r0
 800573c:	460d      	mov	r5, r1
 800573e:	d016      	beq.n	800576e <__ieee754_rem_pio2+0xf6>
 8005740:	a38f      	add	r3, pc, #572	; (adr r3, 8005980 <__ieee754_rem_pio2+0x308>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fecb 	bl	80004e0 <__adddf3>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	e9ca 2300 	strd	r2, r3, [sl]
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fa fec1 	bl	80004dc <__aeabi_dsub>
 800575a:	a389      	add	r3, pc, #548	; (adr r3, 8005980 <__ieee754_rem_pio2+0x308>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f7fa febe 	bl	80004e0 <__adddf3>
 8005764:	f04f 3bff 	mov.w	fp, #4294967295
 8005768:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800576c:	e7c4      	b.n	80056f8 <__ieee754_rem_pio2+0x80>
 800576e:	a386      	add	r3, pc, #536	; (adr r3, 8005988 <__ieee754_rem_pio2+0x310>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa feb4 	bl	80004e0 <__adddf3>
 8005778:	a385      	add	r3, pc, #532	; (adr r3, 8005990 <__ieee754_rem_pio2+0x318>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	4604      	mov	r4, r0
 8005780:	460d      	mov	r5, r1
 8005782:	f7fa fead 	bl	80004e0 <__adddf3>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	e9ca 2300 	strd	r2, r3, [sl]
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f7fa fea3 	bl	80004dc <__aeabi_dsub>
 8005796:	a37e      	add	r3, pc, #504	; (adr r3, 8005990 <__ieee754_rem_pio2+0x318>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	e7e0      	b.n	8005760 <__ieee754_rem_pio2+0xe8>
 800579e:	4b87      	ldr	r3, [pc, #540]	; (80059bc <__ieee754_rem_pio2+0x344>)
 80057a0:	4598      	cmp	r8, r3
 80057a2:	f300 80d8 	bgt.w	8005956 <__ieee754_rem_pio2+0x2de>
 80057a6:	f000 f96d 	bl	8005a84 <fabs>
 80057aa:	ec55 4b10 	vmov	r4, r5, d0
 80057ae:	ee10 0a10 	vmov	r0, s0
 80057b2:	a379      	add	r3, pc, #484	; (adr r3, 8005998 <__ieee754_rem_pio2+0x320>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fa fd61 	bl	8000280 <__aeabi_dmul>
 80057be:	4b80      	ldr	r3, [pc, #512]	; (80059c0 <__ieee754_rem_pio2+0x348>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	f7fa fe8d 	bl	80004e0 <__adddf3>
 80057c6:	f7fb f8c9 	bl	800095c <__aeabi_d2iz>
 80057ca:	4683      	mov	fp, r0
 80057cc:	f7fa ffd4 	bl	8000778 <__aeabi_i2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	ec43 2b18 	vmov	d8, r2, r3
 80057d8:	a367      	add	r3, pc, #412	; (adr r3, 8005978 <__ieee754_rem_pio2+0x300>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa fd4f 	bl	8000280 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa fe77 	bl	80004dc <__aeabi_dsub>
 80057ee:	a364      	add	r3, pc, #400	; (adr r3, 8005980 <__ieee754_rem_pio2+0x308>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	ec51 0b18 	vmov	r0, r1, d8
 80057fc:	f7fa fd40 	bl	8000280 <__aeabi_dmul>
 8005800:	f1bb 0f1f 	cmp.w	fp, #31
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	dc0d      	bgt.n	8005826 <__ieee754_rem_pio2+0x1ae>
 800580a:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <__ieee754_rem_pio2+0x34c>)
 800580c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	4543      	cmp	r3, r8
 8005816:	d006      	beq.n	8005826 <__ieee754_rem_pio2+0x1ae>
 8005818:	4622      	mov	r2, r4
 800581a:	462b      	mov	r3, r5
 800581c:	4630      	mov	r0, r6
 800581e:	4639      	mov	r1, r7
 8005820:	f7fa fe5c 	bl	80004dc <__aeabi_dsub>
 8005824:	e00e      	b.n	8005844 <__ieee754_rem_pio2+0x1cc>
 8005826:	462b      	mov	r3, r5
 8005828:	4622      	mov	r2, r4
 800582a:	4630      	mov	r0, r6
 800582c:	4639      	mov	r1, r7
 800582e:	f7fa fe55 	bl	80004dc <__aeabi_dsub>
 8005832:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800583c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005840:	2b10      	cmp	r3, #16
 8005842:	dc02      	bgt.n	800584a <__ieee754_rem_pio2+0x1d2>
 8005844:	e9ca 0100 	strd	r0, r1, [sl]
 8005848:	e039      	b.n	80058be <__ieee754_rem_pio2+0x246>
 800584a:	a34f      	add	r3, pc, #316	; (adr r3, 8005988 <__ieee754_rem_pio2+0x310>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	ec51 0b18 	vmov	r0, r1, d8
 8005854:	f7fa fd14 	bl	8000280 <__aeabi_dmul>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f7fa fe3a 	bl	80004dc <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4680      	mov	r8, r0
 800586e:	4689      	mov	r9, r1
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	f7fa fe32 	bl	80004dc <__aeabi_dsub>
 8005878:	4622      	mov	r2, r4
 800587a:	462b      	mov	r3, r5
 800587c:	f7fa fe2e 	bl	80004dc <__aeabi_dsub>
 8005880:	a343      	add	r3, pc, #268	; (adr r3, 8005990 <__ieee754_rem_pio2+0x318>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	ec51 0b18 	vmov	r0, r1, d8
 800588e:	f7fa fcf7 	bl	8000280 <__aeabi_dmul>
 8005892:	4622      	mov	r2, r4
 8005894:	462b      	mov	r3, r5
 8005896:	f7fa fe21 	bl	80004dc <__aeabi_dsub>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4604      	mov	r4, r0
 80058a0:	460d      	mov	r5, r1
 80058a2:	4640      	mov	r0, r8
 80058a4:	4649      	mov	r1, r9
 80058a6:	f7fa fe19 	bl	80004dc <__aeabi_dsub>
 80058aa:	9a03      	ldr	r2, [sp, #12]
 80058ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b31      	cmp	r3, #49	; 0x31
 80058b4:	dc24      	bgt.n	8005900 <__ieee754_rem_pio2+0x288>
 80058b6:	e9ca 0100 	strd	r0, r1, [sl]
 80058ba:	4646      	mov	r6, r8
 80058bc:	464f      	mov	r7, r9
 80058be:	e9da 8900 	ldrd	r8, r9, [sl]
 80058c2:	4630      	mov	r0, r6
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fa fe07 	bl	80004dc <__aeabi_dsub>
 80058ce:	462b      	mov	r3, r5
 80058d0:	4622      	mov	r2, r4
 80058d2:	f7fa fe03 	bl	80004dc <__aeabi_dsub>
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058de:	f6bf af0b 	bge.w	80056f8 <__ieee754_rem_pio2+0x80>
 80058e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80058ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ee:	f8ca 8000 	str.w	r8, [sl]
 80058f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80058f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80058fa:	f1cb 0b00 	rsb	fp, fp, #0
 80058fe:	e6fb      	b.n	80056f8 <__ieee754_rem_pio2+0x80>
 8005900:	a327      	add	r3, pc, #156	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x328>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	ec51 0b18 	vmov	r0, r1, d8
 800590a:	f7fa fcb9 	bl	8000280 <__aeabi_dmul>
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4640      	mov	r0, r8
 8005918:	4649      	mov	r1, r9
 800591a:	f7fa fddf 	bl	80004dc <__aeabi_dsub>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fa fdd7 	bl	80004dc <__aeabi_dsub>
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	f7fa fdd3 	bl	80004dc <__aeabi_dsub>
 8005936:	a31c      	add	r3, pc, #112	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x330>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	4604      	mov	r4, r0
 800593e:	460d      	mov	r5, r1
 8005940:	ec51 0b18 	vmov	r0, r1, d8
 8005944:	f7fa fc9c 	bl	8000280 <__aeabi_dmul>
 8005948:	4622      	mov	r2, r4
 800594a:	462b      	mov	r3, r5
 800594c:	f7fa fdc6 	bl	80004dc <__aeabi_dsub>
 8005950:	4604      	mov	r4, r0
 8005952:	460d      	mov	r5, r1
 8005954:	e760      	b.n	8005818 <__ieee754_rem_pio2+0x1a0>
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <__ieee754_rem_pio2+0x350>)
 8005958:	4598      	cmp	r8, r3
 800595a:	dd37      	ble.n	80059cc <__ieee754_rem_pio2+0x354>
 800595c:	ee10 2a10 	vmov	r2, s0
 8005960:	462b      	mov	r3, r5
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fa fdb9 	bl	80004dc <__aeabi_dsub>
 800596a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800596e:	e9ca 0100 	strd	r0, r1, [sl]
 8005972:	e695      	b.n	80056a0 <__ieee754_rem_pio2+0x28>
 8005974:	f3af 8000 	nop.w
 8005978:	54400000 	.word	0x54400000
 800597c:	3ff921fb 	.word	0x3ff921fb
 8005980:	1a626331 	.word	0x1a626331
 8005984:	3dd0b461 	.word	0x3dd0b461
 8005988:	1a600000 	.word	0x1a600000
 800598c:	3dd0b461 	.word	0x3dd0b461
 8005990:	2e037073 	.word	0x2e037073
 8005994:	3ba3198a 	.word	0x3ba3198a
 8005998:	6dc9c883 	.word	0x6dc9c883
 800599c:	3fe45f30 	.word	0x3fe45f30
 80059a0:	2e000000 	.word	0x2e000000
 80059a4:	3ba3198a 	.word	0x3ba3198a
 80059a8:	252049c1 	.word	0x252049c1
 80059ac:	397b839a 	.word	0x397b839a
 80059b0:	3fe921fb 	.word	0x3fe921fb
 80059b4:	4002d97b 	.word	0x4002d97b
 80059b8:	3ff921fb 	.word	0x3ff921fb
 80059bc:	413921fb 	.word	0x413921fb
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	08006bb4 	.word	0x08006bb4
 80059c8:	7fefffff 	.word	0x7fefffff
 80059cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80059d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80059d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80059d8:	4620      	mov	r0, r4
 80059da:	460d      	mov	r5, r1
 80059dc:	f7fa ffbe 	bl	800095c <__aeabi_d2iz>
 80059e0:	f7fa feca 	bl	8000778 <__aeabi_i2d>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4620      	mov	r0, r4
 80059ea:	4629      	mov	r1, r5
 80059ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059f0:	f7fa fd74 	bl	80004dc <__aeabi_dsub>
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <__ieee754_rem_pio2+0x404>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	f7fa fc42 	bl	8000280 <__aeabi_dmul>
 80059fc:	460d      	mov	r5, r1
 80059fe:	4604      	mov	r4, r0
 8005a00:	f7fa ffac 	bl	800095c <__aeabi_d2iz>
 8005a04:	f7fa feb8 	bl	8000778 <__aeabi_i2d>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a14:	f7fa fd62 	bl	80004dc <__aeabi_dsub>
 8005a18:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <__ieee754_rem_pio2+0x404>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f7fa fc30 	bl	8000280 <__aeabi_dmul>
 8005a20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a24:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005a28:	2703      	movs	r7, #3
 8005a2a:	2400      	movs	r4, #0
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005a32:	4622      	mov	r2, r4
 8005a34:	462b      	mov	r3, r5
 8005a36:	46b9      	mov	r9, r7
 8005a38:	3f01      	subs	r7, #1
 8005a3a:	f7fa ff5d 	bl	80008f8 <__aeabi_dcmpeq>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d1f5      	bne.n	8005a2e <__ieee754_rem_pio2+0x3b6>
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <__ieee754_rem_pio2+0x408>)
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	2302      	movs	r3, #2
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	4651      	mov	r1, sl
 8005a50:	a804      	add	r0, sp, #16
 8005a52:	f000 f821 	bl	8005a98 <__kernel_rem_pio2>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	4683      	mov	fp, r0
 8005a5c:	f6bf ae4c 	bge.w	80056f8 <__ieee754_rem_pio2+0x80>
 8005a60:	e9da 2100 	ldrd	r2, r1, [sl]
 8005a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a68:	e9ca 2300 	strd	r2, r3, [sl]
 8005a6c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005a70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a74:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005a78:	e73f      	b.n	80058fa <__ieee754_rem_pio2+0x282>
 8005a7a:	bf00      	nop
 8005a7c:	41700000 	.word	0x41700000
 8005a80:	08006c34 	.word	0x08006c34

08005a84 <fabs>:
 8005a84:	ec51 0b10 	vmov	r0, r1, d0
 8005a88:	ee10 2a10 	vmov	r2, s0
 8005a8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a90:	ec43 2b10 	vmov	d0, r2, r3
 8005a94:	4770      	bx	lr
	...

08005a98 <__kernel_rem_pio2>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b02 	vpush	{d8}
 8005aa0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005aa4:	f112 0f14 	cmn.w	r2, #20
 8005aa8:	9306      	str	r3, [sp, #24]
 8005aaa:	9104      	str	r1, [sp, #16]
 8005aac:	4bc2      	ldr	r3, [pc, #776]	; (8005db8 <__kernel_rem_pio2+0x320>)
 8005aae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005ab0:	9009      	str	r0, [sp, #36]	; 0x24
 8005ab2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	9b06      	ldr	r3, [sp, #24]
 8005aba:	f103 33ff 	add.w	r3, r3, #4294967295
 8005abe:	bfa8      	it	ge
 8005ac0:	1ed4      	subge	r4, r2, #3
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	bfb2      	itee	lt
 8005ac6:	2400      	movlt	r4, #0
 8005ac8:	2318      	movge	r3, #24
 8005aca:	fb94 f4f3 	sdivge	r4, r4, r3
 8005ace:	f06f 0317 	mvn.w	r3, #23
 8005ad2:	fb04 3303 	mla	r3, r4, r3, r3
 8005ad6:	eb03 0a02 	add.w	sl, r3, r2
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	9a05      	ldr	r2, [sp, #20]
 8005ade:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005da8 <__kernel_rem_pio2+0x310>
 8005ae2:	eb03 0802 	add.w	r8, r3, r2
 8005ae6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005ae8:	1aa7      	subs	r7, r4, r2
 8005aea:	ae20      	add	r6, sp, #128	; 0x80
 8005aec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005af0:	2500      	movs	r5, #0
 8005af2:	4545      	cmp	r5, r8
 8005af4:	dd13      	ble.n	8005b1e <__kernel_rem_pio2+0x86>
 8005af6:	9b06      	ldr	r3, [sp, #24]
 8005af8:	aa20      	add	r2, sp, #128	; 0x80
 8005afa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005afe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	9b00      	ldr	r3, [sp, #0]
 8005b08:	4598      	cmp	r8, r3
 8005b0a:	dc31      	bgt.n	8005b70 <__kernel_rem_pio2+0xd8>
 8005b0c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005da8 <__kernel_rem_pio2+0x310>
 8005b10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005b14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b18:	462f      	mov	r7, r5
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	e01b      	b.n	8005b56 <__kernel_rem_pio2+0xbe>
 8005b1e:	42ef      	cmn	r7, r5
 8005b20:	d407      	bmi.n	8005b32 <__kernel_rem_pio2+0x9a>
 8005b22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005b26:	f7fa fe27 	bl	8000778 <__aeabi_i2d>
 8005b2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005b2e:	3501      	adds	r5, #1
 8005b30:	e7df      	b.n	8005af2 <__kernel_rem_pio2+0x5a>
 8005b32:	ec51 0b18 	vmov	r0, r1, d8
 8005b36:	e7f8      	b.n	8005b2a <__kernel_rem_pio2+0x92>
 8005b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005b40:	f7fa fb9e 	bl	8000280 <__aeabi_dmul>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b4c:	f7fa fcc8 	bl	80004e0 <__adddf3>
 8005b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b54:	3601      	adds	r6, #1
 8005b56:	9b05      	ldr	r3, [sp, #20]
 8005b58:	429e      	cmp	r6, r3
 8005b5a:	f1a7 0708 	sub.w	r7, r7, #8
 8005b5e:	ddeb      	ble.n	8005b38 <__kernel_rem_pio2+0xa0>
 8005b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b64:	f108 0801 	add.w	r8, r8, #1
 8005b68:	ecab 7b02 	vstmia	fp!, {d7}
 8005b6c:	3508      	adds	r5, #8
 8005b6e:	e7ca      	b.n	8005b06 <__kernel_rem_pio2+0x6e>
 8005b70:	9b00      	ldr	r3, [sp, #0]
 8005b72:	aa0c      	add	r2, sp, #48	; 0x30
 8005b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b7a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005b7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005b80:	9c00      	ldr	r4, [sp, #0]
 8005b82:	930a      	str	r3, [sp, #40]	; 0x28
 8005b84:	00e3      	lsls	r3, r4, #3
 8005b86:	9308      	str	r3, [sp, #32]
 8005b88:	ab98      	add	r3, sp, #608	; 0x260
 8005b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005b92:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005b96:	ab70      	add	r3, sp, #448	; 0x1c0
 8005b98:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005b9c:	46c3      	mov	fp, r8
 8005b9e:	46a1      	mov	r9, r4
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	f1a5 0508 	sub.w	r5, r5, #8
 8005ba8:	dc77      	bgt.n	8005c9a <__kernel_rem_pio2+0x202>
 8005baa:	ec47 6b10 	vmov	d0, r6, r7
 8005bae:	4650      	mov	r0, sl
 8005bb0:	f000 fac2 	bl	8006138 <scalbn>
 8005bb4:	ec57 6b10 	vmov	r6, r7, d0
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005bbe:	ee10 0a10 	vmov	r0, s0
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa fb5c 	bl	8000280 <__aeabi_dmul>
 8005bc8:	ec41 0b10 	vmov	d0, r0, r1
 8005bcc:	f000 fb34 	bl	8006238 <floor>
 8005bd0:	4b7a      	ldr	r3, [pc, #488]	; (8005dbc <__kernel_rem_pio2+0x324>)
 8005bd2:	ec51 0b10 	vmov	r0, r1, d0
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f7fa fb52 	bl	8000280 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4630      	mov	r0, r6
 8005be2:	4639      	mov	r1, r7
 8005be4:	f7fa fc7a 	bl	80004dc <__aeabi_dsub>
 8005be8:	460f      	mov	r7, r1
 8005bea:	4606      	mov	r6, r0
 8005bec:	f7fa feb6 	bl	800095c <__aeabi_d2iz>
 8005bf0:	9002      	str	r0, [sp, #8]
 8005bf2:	f7fa fdc1 	bl	8000778 <__aeabi_i2d>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa fc6d 	bl	80004dc <__aeabi_dsub>
 8005c02:	f1ba 0f00 	cmp.w	sl, #0
 8005c06:	4606      	mov	r6, r0
 8005c08:	460f      	mov	r7, r1
 8005c0a:	dd6d      	ble.n	8005ce8 <__kernel_rem_pio2+0x250>
 8005c0c:	1e61      	subs	r1, r4, #1
 8005c0e:	ab0c      	add	r3, sp, #48	; 0x30
 8005c10:	9d02      	ldr	r5, [sp, #8]
 8005c12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c16:	f1ca 0018 	rsb	r0, sl, #24
 8005c1a:	fa43 f200 	asr.w	r2, r3, r0
 8005c1e:	4415      	add	r5, r2
 8005c20:	4082      	lsls	r2, r0
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	aa0c      	add	r2, sp, #48	; 0x30
 8005c26:	9502      	str	r5, [sp, #8]
 8005c28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005c2c:	f1ca 0217 	rsb	r2, sl, #23
 8005c30:	fa43 fb02 	asr.w	fp, r3, r2
 8005c34:	f1bb 0f00 	cmp.w	fp, #0
 8005c38:	dd65      	ble.n	8005d06 <__kernel_rem_pio2+0x26e>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	3301      	adds	r3, #1
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	4615      	mov	r5, r2
 8005c44:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005c48:	4294      	cmp	r4, r2
 8005c4a:	f300 809f 	bgt.w	8005d8c <__kernel_rem_pio2+0x2f4>
 8005c4e:	f1ba 0f00 	cmp.w	sl, #0
 8005c52:	dd07      	ble.n	8005c64 <__kernel_rem_pio2+0x1cc>
 8005c54:	f1ba 0f01 	cmp.w	sl, #1
 8005c58:	f000 80c1 	beq.w	8005dde <__kernel_rem_pio2+0x346>
 8005c5c:	f1ba 0f02 	cmp.w	sl, #2
 8005c60:	f000 80c7 	beq.w	8005df2 <__kernel_rem_pio2+0x35a>
 8005c64:	f1bb 0f02 	cmp.w	fp, #2
 8005c68:	d14d      	bne.n	8005d06 <__kernel_rem_pio2+0x26e>
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4954      	ldr	r1, [pc, #336]	; (8005dc0 <__kernel_rem_pio2+0x328>)
 8005c70:	2000      	movs	r0, #0
 8005c72:	f7fa fc33 	bl	80004dc <__aeabi_dsub>
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	d043      	beq.n	8005d06 <__kernel_rem_pio2+0x26e>
 8005c7e:	4650      	mov	r0, sl
 8005c80:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005db0 <__kernel_rem_pio2+0x318>
 8005c84:	f000 fa58 	bl	8006138 <scalbn>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	ec53 2b10 	vmov	r2, r3, d0
 8005c90:	f7fa fc24 	bl	80004dc <__aeabi_dsub>
 8005c94:	4606      	mov	r6, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	e035      	b.n	8005d06 <__kernel_rem_pio2+0x26e>
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <__kernel_rem_pio2+0x32c>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	f7fa faed 	bl	8000280 <__aeabi_dmul>
 8005ca6:	f7fa fe59 	bl	800095c <__aeabi_d2iz>
 8005caa:	f7fa fd65 	bl	8000778 <__aeabi_i2d>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	ec43 2b18 	vmov	d8, r2, r3
 8005cb6:	4b44      	ldr	r3, [pc, #272]	; (8005dc8 <__kernel_rem_pio2+0x330>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f7fa fae1 	bl	8000280 <__aeabi_dmul>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	f7fa fc09 	bl	80004dc <__aeabi_dsub>
 8005cca:	f7fa fe47 	bl	800095c <__aeabi_d2iz>
 8005cce:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cd2:	f84b 0b04 	str.w	r0, [fp], #4
 8005cd6:	ec51 0b18 	vmov	r0, r1, d8
 8005cda:	f7fa fc01 	bl	80004e0 <__adddf3>
 8005cde:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	e75b      	b.n	8005ba0 <__kernel_rem_pio2+0x108>
 8005ce8:	d106      	bne.n	8005cf8 <__kernel_rem_pio2+0x260>
 8005cea:	1e63      	subs	r3, r4, #1
 8005cec:	aa0c      	add	r2, sp, #48	; 0x30
 8005cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005cf6:	e79d      	b.n	8005c34 <__kernel_rem_pio2+0x19c>
 8005cf8:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <__kernel_rem_pio2+0x334>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f7fa fe1a 	bl	8000934 <__aeabi_dcmpge>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d140      	bne.n	8005d86 <__kernel_rem_pio2+0x2ee>
 8005d04:	4683      	mov	fp, r0
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	f7fa fdf3 	bl	80008f8 <__aeabi_dcmpeq>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f000 80c1 	beq.w	8005e9a <__kernel_rem_pio2+0x402>
 8005d18:	1e65      	subs	r5, r4, #1
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	9900      	ldr	r1, [sp, #0]
 8005d20:	428b      	cmp	r3, r1
 8005d22:	da6d      	bge.n	8005e00 <__kernel_rem_pio2+0x368>
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f000 808a 	beq.w	8005e3e <__kernel_rem_pio2+0x3a6>
 8005d2a:	ab0c      	add	r3, sp, #48	; 0x30
 8005d2c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005d30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80ae 	beq.w	8005e96 <__kernel_rem_pio2+0x3fe>
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005db0 <__kernel_rem_pio2+0x318>
 8005d40:	f000 f9fa 	bl	8006138 <scalbn>
 8005d44:	1c6b      	adds	r3, r5, #1
 8005d46:	00da      	lsls	r2, r3, #3
 8005d48:	9205      	str	r2, [sp, #20]
 8005d4a:	ec57 6b10 	vmov	r6, r7, d0
 8005d4e:	aa70      	add	r2, sp, #448	; 0x1c0
 8005d50:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005dc4 <__kernel_rem_pio2+0x32c>
 8005d54:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005d58:	462c      	mov	r4, r5
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	f280 80d4 	bge.w	8005f0c <__kernel_rem_pio2+0x474>
 8005d64:	462c      	mov	r4, r5
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	f2c0 8102 	blt.w	8005f70 <__kernel_rem_pio2+0x4d8>
 8005d6c:	4b18      	ldr	r3, [pc, #96]	; (8005dd0 <__kernel_rem_pio2+0x338>)
 8005d6e:	461e      	mov	r6, r3
 8005d70:	ab70      	add	r3, sp, #448	; 0x1c0
 8005d72:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005d76:	1b2b      	subs	r3, r5, r4
 8005d78:	f04f 0900 	mov.w	r9, #0
 8005d7c:	f04f 0a00 	mov.w	sl, #0
 8005d80:	2700      	movs	r7, #0
 8005d82:	9306      	str	r3, [sp, #24]
 8005d84:	e0e6      	b.n	8005f54 <__kernel_rem_pio2+0x4bc>
 8005d86:	f04f 0b02 	mov.w	fp, #2
 8005d8a:	e756      	b.n	8005c3a <__kernel_rem_pio2+0x1a2>
 8005d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d90:	bb05      	cbnz	r5, 8005dd4 <__kernel_rem_pio2+0x33c>
 8005d92:	b123      	cbz	r3, 8005d9e <__kernel_rem_pio2+0x306>
 8005d94:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005d98:	f8c8 3000 	str.w	r3, [r8]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	3201      	adds	r2, #1
 8005da0:	f108 0804 	add.w	r8, r8, #4
 8005da4:	461d      	mov	r5, r3
 8005da6:	e74f      	b.n	8005c48 <__kernel_rem_pio2+0x1b0>
	...
 8005db4:	3ff00000 	.word	0x3ff00000
 8005db8:	08006d80 	.word	0x08006d80
 8005dbc:	40200000 	.word	0x40200000
 8005dc0:	3ff00000 	.word	0x3ff00000
 8005dc4:	3e700000 	.word	0x3e700000
 8005dc8:	41700000 	.word	0x41700000
 8005dcc:	3fe00000 	.word	0x3fe00000
 8005dd0:	08006d40 	.word	0x08006d40
 8005dd4:	1acb      	subs	r3, r1, r3
 8005dd6:	f8c8 3000 	str.w	r3, [r8]
 8005dda:	462b      	mov	r3, r5
 8005ddc:	e7df      	b.n	8005d9e <__kernel_rem_pio2+0x306>
 8005dde:	1e62      	subs	r2, r4, #1
 8005de0:	ab0c      	add	r3, sp, #48	; 0x30
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005dea:	a90c      	add	r1, sp, #48	; 0x30
 8005dec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005df0:	e738      	b.n	8005c64 <__kernel_rem_pio2+0x1cc>
 8005df2:	1e62      	subs	r2, r4, #1
 8005df4:	ab0c      	add	r3, sp, #48	; 0x30
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005dfe:	e7f4      	b.n	8005dea <__kernel_rem_pio2+0x352>
 8005e00:	a90c      	add	r1, sp, #48	; 0x30
 8005e02:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	e788      	b.n	8005d1e <__kernel_rem_pio2+0x286>
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d0fa      	beq.n	8005e0c <__kernel_rem_pio2+0x374>
 8005e16:	9a08      	ldr	r2, [sp, #32]
 8005e18:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005e1c:	446a      	add	r2, sp
 8005e1e:	3a98      	subs	r2, #152	; 0x98
 8005e20:	9208      	str	r2, [sp, #32]
 8005e22:	9a06      	ldr	r2, [sp, #24]
 8005e24:	a920      	add	r1, sp, #128	; 0x80
 8005e26:	18a2      	adds	r2, r4, r2
 8005e28:	18e3      	adds	r3, r4, r3
 8005e2a:	f104 0801 	add.w	r8, r4, #1
 8005e2e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005e32:	9302      	str	r3, [sp, #8]
 8005e34:	9b02      	ldr	r3, [sp, #8]
 8005e36:	4543      	cmp	r3, r8
 8005e38:	da04      	bge.n	8005e44 <__kernel_rem_pio2+0x3ac>
 8005e3a:	461c      	mov	r4, r3
 8005e3c:	e6a2      	b.n	8005b84 <__kernel_rem_pio2+0xec>
 8005e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7e4      	b.n	8005e0e <__kernel_rem_pio2+0x376>
 8005e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e46:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005e4a:	f7fa fc95 	bl	8000778 <__aeabi_i2d>
 8005e4e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e54:	46ab      	mov	fp, r5
 8005e56:	461c      	mov	r4, r3
 8005e58:	f04f 0900 	mov.w	r9, #0
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	2700      	movs	r7, #0
 8005e60:	9b05      	ldr	r3, [sp, #20]
 8005e62:	4599      	cmp	r9, r3
 8005e64:	dd06      	ble.n	8005e74 <__kernel_rem_pio2+0x3dc>
 8005e66:	9b08      	ldr	r3, [sp, #32]
 8005e68:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005e6c:	f108 0801 	add.w	r8, r8, #1
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	e7df      	b.n	8005e34 <__kernel_rem_pio2+0x39c>
 8005e74:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005e78:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005e7c:	f7fa fa00 	bl	8000280 <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fb2a 	bl	80004e0 <__adddf3>
 8005e8c:	f109 0901 	add.w	r9, r9, #1
 8005e90:	4606      	mov	r6, r0
 8005e92:	460f      	mov	r7, r1
 8005e94:	e7e4      	b.n	8005e60 <__kernel_rem_pio2+0x3c8>
 8005e96:	3d01      	subs	r5, #1
 8005e98:	e747      	b.n	8005d2a <__kernel_rem_pio2+0x292>
 8005e9a:	ec47 6b10 	vmov	d0, r6, r7
 8005e9e:	f1ca 0000 	rsb	r0, sl, #0
 8005ea2:	f000 f949 	bl	8006138 <scalbn>
 8005ea6:	ec57 6b10 	vmov	r6, r7, d0
 8005eaa:	4ba0      	ldr	r3, [pc, #640]	; (800612c <__kernel_rem_pio2+0x694>)
 8005eac:	ee10 0a10 	vmov	r0, s0
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fd3e 	bl	8000934 <__aeabi_dcmpge>
 8005eb8:	b1f8      	cbz	r0, 8005efa <__kernel_rem_pio2+0x462>
 8005eba:	4b9d      	ldr	r3, [pc, #628]	; (8006130 <__kernel_rem_pio2+0x698>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa f9dd 	bl	8000280 <__aeabi_dmul>
 8005ec6:	f7fa fd49 	bl	800095c <__aeabi_d2iz>
 8005eca:	4680      	mov	r8, r0
 8005ecc:	f7fa fc54 	bl	8000778 <__aeabi_i2d>
 8005ed0:	4b96      	ldr	r3, [pc, #600]	; (800612c <__kernel_rem_pio2+0x694>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7fa f9d4 	bl	8000280 <__aeabi_dmul>
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4602      	mov	r2, r0
 8005edc:	4639      	mov	r1, r7
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7fa fafc 	bl	80004dc <__aeabi_dsub>
 8005ee4:	f7fa fd3a 	bl	800095c <__aeabi_d2iz>
 8005ee8:	1c65      	adds	r5, r4, #1
 8005eea:	ab0c      	add	r3, sp, #48	; 0x30
 8005eec:	f10a 0a18 	add.w	sl, sl, #24
 8005ef0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ef4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005ef8:	e71f      	b.n	8005d3a <__kernel_rem_pio2+0x2a2>
 8005efa:	4630      	mov	r0, r6
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa fd2d 	bl	800095c <__aeabi_d2iz>
 8005f02:	ab0c      	add	r3, sp, #48	; 0x30
 8005f04:	4625      	mov	r5, r4
 8005f06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f0a:	e716      	b.n	8005d3a <__kernel_rem_pio2+0x2a2>
 8005f0c:	ab0c      	add	r3, sp, #48	; 0x30
 8005f0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005f12:	f7fa fc31 	bl	8000778 <__aeabi_i2d>
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	f7fa f9b1 	bl	8000280 <__aeabi_dmul>
 8005f1e:	4642      	mov	r2, r8
 8005f20:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005f24:	464b      	mov	r3, r9
 8005f26:	4630      	mov	r0, r6
 8005f28:	4639      	mov	r1, r7
 8005f2a:	f7fa f9a9 	bl	8000280 <__aeabi_dmul>
 8005f2e:	3c01      	subs	r4, #1
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	e713      	b.n	8005d5e <__kernel_rem_pio2+0x2c6>
 8005f36:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005f3a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005f3e:	f7fa f99f 	bl	8000280 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4648      	mov	r0, r9
 8005f48:	4651      	mov	r1, sl
 8005f4a:	f7fa fac9 	bl	80004e0 <__adddf3>
 8005f4e:	3701      	adds	r7, #1
 8005f50:	4681      	mov	r9, r0
 8005f52:	468a      	mov	sl, r1
 8005f54:	9b00      	ldr	r3, [sp, #0]
 8005f56:	429f      	cmp	r7, r3
 8005f58:	dc02      	bgt.n	8005f60 <__kernel_rem_pio2+0x4c8>
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	429f      	cmp	r7, r3
 8005f5e:	ddea      	ble.n	8005f36 <__kernel_rem_pio2+0x49e>
 8005f60:	9a06      	ldr	r2, [sp, #24]
 8005f62:	ab48      	add	r3, sp, #288	; 0x120
 8005f64:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005f68:	e9c6 9a00 	strd	r9, sl, [r6]
 8005f6c:	3c01      	subs	r4, #1
 8005f6e:	e6fa      	b.n	8005d66 <__kernel_rem_pio2+0x2ce>
 8005f70:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	dc0b      	bgt.n	8005f8e <__kernel_rem_pio2+0x4f6>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dc39      	bgt.n	8005fee <__kernel_rem_pio2+0x556>
 8005f7a:	d05d      	beq.n	8006038 <__kernel_rem_pio2+0x5a0>
 8005f7c:	9b02      	ldr	r3, [sp, #8]
 8005f7e:	f003 0007 	and.w	r0, r3, #7
 8005f82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005f86:	ecbd 8b02 	vpop	{d8}
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d1f3      	bne.n	8005f7c <__kernel_rem_pio2+0x4e4>
 8005f94:	9b05      	ldr	r3, [sp, #20]
 8005f96:	9500      	str	r5, [sp, #0]
 8005f98:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005f9c:	eb0d 0403 	add.w	r4, sp, r3
 8005fa0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005fa4:	46a2      	mov	sl, r4
 8005fa6:	9b00      	ldr	r3, [sp, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f1aa 0a08 	sub.w	sl, sl, #8
 8005fae:	dc69      	bgt.n	8006084 <__kernel_rem_pio2+0x5ec>
 8005fb0:	46aa      	mov	sl, r5
 8005fb2:	f1ba 0f01 	cmp.w	sl, #1
 8005fb6:	f1a4 0408 	sub.w	r4, r4, #8
 8005fba:	f300 8083 	bgt.w	80060c4 <__kernel_rem_pio2+0x62c>
 8005fbe:	9c05      	ldr	r4, [sp, #20]
 8005fc0:	ab48      	add	r3, sp, #288	; 0x120
 8005fc2:	441c      	add	r4, r3
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	2d01      	cmp	r5, #1
 8005fca:	f300 809a 	bgt.w	8006102 <__kernel_rem_pio2+0x66a>
 8005fce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005fd2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005fd6:	f1bb 0f00 	cmp.w	fp, #0
 8005fda:	f040 8098 	bne.w	800610e <__kernel_rem_pio2+0x676>
 8005fde:	9b04      	ldr	r3, [sp, #16]
 8005fe0:	e9c3 7800 	strd	r7, r8, [r3]
 8005fe4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005fe8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005fec:	e7c6      	b.n	8005f7c <__kernel_rem_pio2+0x4e4>
 8005fee:	9e05      	ldr	r6, [sp, #20]
 8005ff0:	ab48      	add	r3, sp, #288	; 0x120
 8005ff2:	441e      	add	r6, r3
 8005ff4:	462c      	mov	r4, r5
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	da33      	bge.n	8006066 <__kernel_rem_pio2+0x5ce>
 8005ffe:	f1bb 0f00 	cmp.w	fp, #0
 8006002:	d036      	beq.n	8006072 <__kernel_rem_pio2+0x5da>
 8006004:	4602      	mov	r2, r0
 8006006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800600a:	9c04      	ldr	r4, [sp, #16]
 800600c:	e9c4 2300 	strd	r2, r3, [r4]
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006018:	f7fa fa60 	bl	80004dc <__aeabi_dsub>
 800601c:	ae4a      	add	r6, sp, #296	; 0x128
 800601e:	2401      	movs	r4, #1
 8006020:	42a5      	cmp	r5, r4
 8006022:	da29      	bge.n	8006078 <__kernel_rem_pio2+0x5e0>
 8006024:	f1bb 0f00 	cmp.w	fp, #0
 8006028:	d002      	beq.n	8006030 <__kernel_rem_pio2+0x598>
 800602a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800602e:	4619      	mov	r1, r3
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006036:	e7a1      	b.n	8005f7c <__kernel_rem_pio2+0x4e4>
 8006038:	9c05      	ldr	r4, [sp, #20]
 800603a:	ab48      	add	r3, sp, #288	; 0x120
 800603c:	441c      	add	r4, r3
 800603e:	2000      	movs	r0, #0
 8006040:	2100      	movs	r1, #0
 8006042:	2d00      	cmp	r5, #0
 8006044:	da09      	bge.n	800605a <__kernel_rem_pio2+0x5c2>
 8006046:	f1bb 0f00 	cmp.w	fp, #0
 800604a:	d002      	beq.n	8006052 <__kernel_rem_pio2+0x5ba>
 800604c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006050:	4619      	mov	r1, r3
 8006052:	9b04      	ldr	r3, [sp, #16]
 8006054:	e9c3 0100 	strd	r0, r1, [r3]
 8006058:	e790      	b.n	8005f7c <__kernel_rem_pio2+0x4e4>
 800605a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800605e:	f7fa fa3f 	bl	80004e0 <__adddf3>
 8006062:	3d01      	subs	r5, #1
 8006064:	e7ed      	b.n	8006042 <__kernel_rem_pio2+0x5aa>
 8006066:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800606a:	f7fa fa39 	bl	80004e0 <__adddf3>
 800606e:	3c01      	subs	r4, #1
 8006070:	e7c3      	b.n	8005ffa <__kernel_rem_pio2+0x562>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e7c8      	b.n	800600a <__kernel_rem_pio2+0x572>
 8006078:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800607c:	f7fa fa30 	bl	80004e0 <__adddf3>
 8006080:	3401      	adds	r4, #1
 8006082:	e7cd      	b.n	8006020 <__kernel_rem_pio2+0x588>
 8006084:	e9da 8900 	ldrd	r8, r9, [sl]
 8006088:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	3b01      	subs	r3, #1
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4632      	mov	r2, r6
 8006094:	463b      	mov	r3, r7
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f7fa fa21 	bl	80004e0 <__adddf3>
 800609e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa fa17 	bl	80004dc <__aeabi_dsub>
 80060ae:	4632      	mov	r2, r6
 80060b0:	463b      	mov	r3, r7
 80060b2:	f7fa fa15 	bl	80004e0 <__adddf3>
 80060b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80060ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060be:	ed8a 7b00 	vstr	d7, [sl]
 80060c2:	e770      	b.n	8005fa6 <__kernel_rem_pio2+0x50e>
 80060c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80060cc:	4640      	mov	r0, r8
 80060ce:	4632      	mov	r2, r6
 80060d0:	463b      	mov	r3, r7
 80060d2:	4649      	mov	r1, r9
 80060d4:	f7fa fa04 	bl	80004e0 <__adddf3>
 80060d8:	e9cd 0100 	strd	r0, r1, [sp]
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa f9fa 	bl	80004dc <__aeabi_dsub>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	f7fa f9f8 	bl	80004e0 <__adddf3>
 80060f0:	ed9d 7b00 	vldr	d7, [sp]
 80060f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060f8:	ed84 7b00 	vstr	d7, [r4]
 80060fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006100:	e757      	b.n	8005fb2 <__kernel_rem_pio2+0x51a>
 8006102:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006106:	f7fa f9eb 	bl	80004e0 <__adddf3>
 800610a:	3d01      	subs	r5, #1
 800610c:	e75c      	b.n	8005fc8 <__kernel_rem_pio2+0x530>
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	9a04      	ldr	r2, [sp, #16]
 8006112:	601f      	str	r7, [r3, #0]
 8006114:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006118:	605c      	str	r4, [r3, #4]
 800611a:	609d      	str	r5, [r3, #8]
 800611c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006120:	60d3      	str	r3, [r2, #12]
 8006122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006126:	6110      	str	r0, [r2, #16]
 8006128:	6153      	str	r3, [r2, #20]
 800612a:	e727      	b.n	8005f7c <__kernel_rem_pio2+0x4e4>
 800612c:	41700000 	.word	0x41700000
 8006130:	3e700000 	.word	0x3e700000
 8006134:	00000000 	.word	0x00000000

08006138 <scalbn>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	ec55 4b10 	vmov	r4, r5, d0
 800613e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006142:	4606      	mov	r6, r0
 8006144:	462b      	mov	r3, r5
 8006146:	b999      	cbnz	r1, 8006170 <scalbn+0x38>
 8006148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800614c:	4323      	orrs	r3, r4
 800614e:	d03f      	beq.n	80061d0 <scalbn+0x98>
 8006150:	4b35      	ldr	r3, [pc, #212]	; (8006228 <scalbn+0xf0>)
 8006152:	4629      	mov	r1, r5
 8006154:	ee10 0a10 	vmov	r0, s0
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa f891 	bl	8000280 <__aeabi_dmul>
 800615e:	4b33      	ldr	r3, [pc, #204]	; (800622c <scalbn+0xf4>)
 8006160:	429e      	cmp	r6, r3
 8006162:	4604      	mov	r4, r0
 8006164:	460d      	mov	r5, r1
 8006166:	da10      	bge.n	800618a <scalbn+0x52>
 8006168:	a327      	add	r3, pc, #156	; (adr r3, 8006208 <scalbn+0xd0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	e01f      	b.n	80061b0 <scalbn+0x78>
 8006170:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006174:	4291      	cmp	r1, r2
 8006176:	d10c      	bne.n	8006192 <scalbn+0x5a>
 8006178:	ee10 2a10 	vmov	r2, s0
 800617c:	4620      	mov	r0, r4
 800617e:	4629      	mov	r1, r5
 8006180:	f7fa f9ae 	bl	80004e0 <__adddf3>
 8006184:	4604      	mov	r4, r0
 8006186:	460d      	mov	r5, r1
 8006188:	e022      	b.n	80061d0 <scalbn+0x98>
 800618a:	460b      	mov	r3, r1
 800618c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006190:	3936      	subs	r1, #54	; 0x36
 8006192:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006196:	4296      	cmp	r6, r2
 8006198:	dd0d      	ble.n	80061b6 <scalbn+0x7e>
 800619a:	2d00      	cmp	r5, #0
 800619c:	a11c      	add	r1, pc, #112	; (adr r1, 8006210 <scalbn+0xd8>)
 800619e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a2:	da02      	bge.n	80061aa <scalbn+0x72>
 80061a4:	a11c      	add	r1, pc, #112	; (adr r1, 8006218 <scalbn+0xe0>)
 80061a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061aa:	a319      	add	r3, pc, #100	; (adr r3, 8006210 <scalbn+0xd8>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f7fa f866 	bl	8000280 <__aeabi_dmul>
 80061b4:	e7e6      	b.n	8006184 <scalbn+0x4c>
 80061b6:	1872      	adds	r2, r6, r1
 80061b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061bc:	428a      	cmp	r2, r1
 80061be:	dcec      	bgt.n	800619a <scalbn+0x62>
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	dd08      	ble.n	80061d6 <scalbn+0x9e>
 80061c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061d0:	ec45 4b10 	vmov	d0, r4, r5
 80061d4:	bd70      	pop	{r4, r5, r6, pc}
 80061d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061da:	da08      	bge.n	80061ee <scalbn+0xb6>
 80061dc:	2d00      	cmp	r5, #0
 80061de:	a10a      	add	r1, pc, #40	; (adr r1, 8006208 <scalbn+0xd0>)
 80061e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e4:	dac0      	bge.n	8006168 <scalbn+0x30>
 80061e6:	a10e      	add	r1, pc, #56	; (adr r1, 8006220 <scalbn+0xe8>)
 80061e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ec:	e7bc      	b.n	8006168 <scalbn+0x30>
 80061ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061f2:	3236      	adds	r2, #54	; 0x36
 80061f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80061fc:	4620      	mov	r0, r4
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <scalbn+0xf8>)
 8006200:	2200      	movs	r2, #0
 8006202:	e7d5      	b.n	80061b0 <scalbn+0x78>
 8006204:	f3af 8000 	nop.w
 8006208:	c2f8f359 	.word	0xc2f8f359
 800620c:	01a56e1f 	.word	0x01a56e1f
 8006210:	8800759c 	.word	0x8800759c
 8006214:	7e37e43c 	.word	0x7e37e43c
 8006218:	8800759c 	.word	0x8800759c
 800621c:	fe37e43c 	.word	0xfe37e43c
 8006220:	c2f8f359 	.word	0xc2f8f359
 8006224:	81a56e1f 	.word	0x81a56e1f
 8006228:	43500000 	.word	0x43500000
 800622c:	ffff3cb0 	.word	0xffff3cb0
 8006230:	3c900000 	.word	0x3c900000
 8006234:	00000000 	.word	0x00000000

08006238 <floor>:
 8006238:	ec51 0b10 	vmov	r0, r1, d0
 800623c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006248:	2e13      	cmp	r6, #19
 800624a:	ee10 5a10 	vmov	r5, s0
 800624e:	ee10 8a10 	vmov	r8, s0
 8006252:	460c      	mov	r4, r1
 8006254:	dc31      	bgt.n	80062ba <floor+0x82>
 8006256:	2e00      	cmp	r6, #0
 8006258:	da14      	bge.n	8006284 <floor+0x4c>
 800625a:	a333      	add	r3, pc, #204	; (adr r3, 8006328 <floor+0xf0>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa f93e 	bl	80004e0 <__adddf3>
 8006264:	2200      	movs	r2, #0
 8006266:	2300      	movs	r3, #0
 8006268:	f7fa fb6e 	bl	8000948 <__aeabi_dcmpgt>
 800626c:	b138      	cbz	r0, 800627e <floor+0x46>
 800626e:	2c00      	cmp	r4, #0
 8006270:	da53      	bge.n	800631a <floor+0xe2>
 8006272:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006276:	4325      	orrs	r5, r4
 8006278:	d052      	beq.n	8006320 <floor+0xe8>
 800627a:	4c2d      	ldr	r4, [pc, #180]	; (8006330 <floor+0xf8>)
 800627c:	2500      	movs	r5, #0
 800627e:	4621      	mov	r1, r4
 8006280:	4628      	mov	r0, r5
 8006282:	e024      	b.n	80062ce <floor+0x96>
 8006284:	4f2b      	ldr	r7, [pc, #172]	; (8006334 <floor+0xfc>)
 8006286:	4137      	asrs	r7, r6
 8006288:	ea01 0307 	and.w	r3, r1, r7
 800628c:	4303      	orrs	r3, r0
 800628e:	d01e      	beq.n	80062ce <floor+0x96>
 8006290:	a325      	add	r3, pc, #148	; (adr r3, 8006328 <floor+0xf0>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7fa f923 	bl	80004e0 <__adddf3>
 800629a:	2200      	movs	r2, #0
 800629c:	2300      	movs	r3, #0
 800629e:	f7fa fb53 	bl	8000948 <__aeabi_dcmpgt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0eb      	beq.n	800627e <floor+0x46>
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	bfbe      	ittt	lt
 80062aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80062ae:	4133      	asrlt	r3, r6
 80062b0:	18e4      	addlt	r4, r4, r3
 80062b2:	ea24 0407 	bic.w	r4, r4, r7
 80062b6:	2500      	movs	r5, #0
 80062b8:	e7e1      	b.n	800627e <floor+0x46>
 80062ba:	2e33      	cmp	r6, #51	; 0x33
 80062bc:	dd0b      	ble.n	80062d6 <floor+0x9e>
 80062be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062c2:	d104      	bne.n	80062ce <floor+0x96>
 80062c4:	ee10 2a10 	vmov	r2, s0
 80062c8:	460b      	mov	r3, r1
 80062ca:	f7fa f909 	bl	80004e0 <__adddf3>
 80062ce:	ec41 0b10 	vmov	d0, r0, r1
 80062d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80062da:	f04f 37ff 	mov.w	r7, #4294967295
 80062de:	40df      	lsrs	r7, r3
 80062e0:	4238      	tst	r0, r7
 80062e2:	d0f4      	beq.n	80062ce <floor+0x96>
 80062e4:	a310      	add	r3, pc, #64	; (adr r3, 8006328 <floor+0xf0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa f8f9 	bl	80004e0 <__adddf3>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7fa fb29 	bl	8000948 <__aeabi_dcmpgt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0c1      	beq.n	800627e <floor+0x46>
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	da0a      	bge.n	8006314 <floor+0xdc>
 80062fe:	2e14      	cmp	r6, #20
 8006300:	d101      	bne.n	8006306 <floor+0xce>
 8006302:	3401      	adds	r4, #1
 8006304:	e006      	b.n	8006314 <floor+0xdc>
 8006306:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800630a:	2301      	movs	r3, #1
 800630c:	40b3      	lsls	r3, r6
 800630e:	441d      	add	r5, r3
 8006310:	45a8      	cmp	r8, r5
 8006312:	d8f6      	bhi.n	8006302 <floor+0xca>
 8006314:	ea25 0507 	bic.w	r5, r5, r7
 8006318:	e7b1      	b.n	800627e <floor+0x46>
 800631a:	2500      	movs	r5, #0
 800631c:	462c      	mov	r4, r5
 800631e:	e7ae      	b.n	800627e <floor+0x46>
 8006320:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006324:	e7ab      	b.n	800627e <floor+0x46>
 8006326:	bf00      	nop
 8006328:	8800759c 	.word	0x8800759c
 800632c:	7e37e43c 	.word	0x7e37e43c
 8006330:	bff00000 	.word	0xbff00000
 8006334:	000fffff 	.word	0x000fffff

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr
